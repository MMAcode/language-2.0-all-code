/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/bundle.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/bundle.js":
/*!**************************!*\
  !*** ./src/js/bundle.js ***!
  \**************************/
/*! exports provided: cards, userID, alertUserForSec, scrollAmount, wordOne */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cards\", function() { return cards; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"userID\", function() { return userID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"alertUserForSec\", function() { return alertUserForSec; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scrollAmount\", function() { return scrollAmount; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"wordOne\", function() { return wordOne; });\n/* harmony import */ var _stopwatchPoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stopwatchPoints */ \"./src/js/stopwatchPoints.js\");\n/* harmony import */ var _wordsOptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wordsOptions */ \"./src/js/wordsOptions.js\");\n// import { importPozdrav } from './test';\r\n\r\n\r\n\r\n\r\n\r\n\r\n//mic\r\n// navigator.permissions.query({ name: 'microphone' })\r\n//   .then((permissionObj) => {\r\n//     console.log('MMMMMMMMMMMMMMMMMMMMMMic report');\r\n//     console.log(permissionObj.state);\r\n//     console.log('MMMMMMMMMMMMMMMMic end');\r\n//   })\r\n//   .catch((error) => {\r\n//     console.log('Got error :', error);\r\n//   });\r\n\r\n\r\n\r\nlet dueCount = 0;\r\nlet toLearnCount = 0;\r\n// const cards = db.collection('FlipCards');\r\nlet cards = db.collection('FlipCards');\r\nlet userID = 0;\r\nlet userInfo = null;\r\n\r\nconst currentCardS = null;\r\nlet currentCard = {};\r\nlet currentCardID = null;\r\nlet wordOne = '';\r\nlet wordTwo = '';\r\nlet wShuffledNumbers = [];\r\nlet evaluateButtonOpacity = 1;\r\n\r\nlet lettersBubblesActive = false;\r\nlet maxNumberOfBubbleLetters = 0;\r\nlet numberOfLettersShownNow = 0;\r\nlet wordTwoLettersShown = '';\r\nlet cardCollectionName = null;\r\n\r\n\r\n// let posponeAdjusted = false;\r\n\r\nconst refresh = document.querySelector('#test');\r\nconst nextBt = document.querySelector('#b_next');\r\nconst threeBt = document.querySelector('#threeButtons');\r\nlet wordsHTML = document.querySelectorAll('#words *')\r\nlet wordsBackground = \"normal\";\r\nlet firstWordHTML = document.querySelector('#wordOne');\r\nlet secondWordHTML = document.querySelector('#wordTwo');\r\nlet levelIndicator = document.querySelector('#levelIndicator');\r\n// let showAllCardsHTML = document.querySelector('#showAllCards');\r\nlet deleteCardHTML = document.querySelector('#deleteCard');\r\nlet loggedStatus = document.querySelector('#loggedInStatus');\r\nlet scoreHTML = document.querySelector('#scoreCounter');\r\nlet mainTitleHTML = document.querySelector('#mainTitle');\r\nlet closeWindowS = document.querySelectorAll('.closeButton');\r\nlet helpUsed = false;\r\nlet updateThisHTMLIdAfterUpdate = null;\r\n// let xcc = document.querySelectorAll('.closeButton2')[0];\r\n// console.log(closeWindowS);\r\n\r\nlet showWindowS = document.querySelectorAll('.visibleIcon');\r\n\r\nlet remindConnectButtonHTML = document.querySelector('#hintConnection');\r\n// remindConnectButtonHTML.classList.remove('hide');\r\nlet remindConnectTextHTML = document.querySelector('#hintConnectionText');\r\n// remindConnectTextHTML.classList.remove('hide');\r\nlet remindButtonHTML = document.querySelector('#hintConnectionReminder');\r\n// remindButtonHTML.classList.remove('hide');\r\nlet remindTextHTML = document.querySelector('#hintConnectionReminderText');\r\n// remindTextHTML.classList.remove('hide');\r\n\r\n\r\nlet score = 0;\r\nlet points = {\r\n  session: 0,\r\n  today: 0\r\n}; //hl. from other file \r\n\r\n// console.log(points);\r\n\r\nlet clickHintCounter = 0;\r\n\r\n\r\nlet languageToSpeak = '';\r\nlet responsiveVoiceLanguage = '';\r\nlet showNativeWordFirst = true;\r\n// let languageSwap = true;  //users who have native language czech\r\nlet languageSwap = false;  //users who have native language czech\r\n\r\n//////////////F other\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//F prepare word to work with\r\nlet getWordToWorkWith = word => {\r\n  let wL = word.length;\r\n  let wUse = '';\r\n  let spaceCounter = 0;\r\n  for (let i = 0; i < wL; i++) {\r\n    if (word[i] === ',' || word[i] === ';' || word[i] === \"\\(\" || word[i] === '{') {\r\n      break;\r\n    } else {\r\n      if (word[i] === ' ') { spaceCounter++; };\r\n      if (spaceCounter > 1) { break; }\r\n      else {\r\n        wUse += `${word[i]}`;\r\n      }\r\n    }\r\n  }\r\n  return wUse;\r\n}\r\n\r\n//////letter puzzle\r\nlet letterPuzzle = word => {\r\n  console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');\r\n\r\n  //F prepare word to work with\r\n  let getWordToWorkWith = word => {\r\n    let wL = word.length;\r\n    let wUse = '';\r\n    let spaceCounter = 0;\r\n    for (let i = 0; i < wL; i++) {\r\n      if (word[i] === ',' || word[i] === ';' || word[i] === \"\\(\" || word[i] === '{') {\r\n        break;\r\n      } else {\r\n        if (word[i] === ' ') { spaceCounter++; };\r\n        if (spaceCounter > 1) { break; }\r\n        else {\r\n          wUse += `${word[i]}`;\r\n        }\r\n      }\r\n    }\r\n    return wUse;\r\n  }\r\n\r\n  // making new element-wrapper\r\n  let makeNewDivElement = (text, /*durationInSec,*/ newDivElID, appendToThisElID, inOrAfter) => {\r\n    let newElement = document.createElement('div');\r\n    newElement.textContent = text;\r\n    newElement.id = newDivElID;\r\n    // newElement.classList.add(\"flyingAlert\");\r\n    // newElement.style.animationDuration = durationInSec + \"s\";\r\n    let hook = document.querySelector(`#${appendToThisElID}`);\r\n    hook.insertAdjacentElement(inOrAfter, newElement);\r\n    // await new Promise(resolve => setTimeout(resolve, durationInSec * 1000));\r\n    // console.log('XXXXXXXXXXX alert pop up');\r\n\r\n    // document.querySelector(\"#newDivElID\").remove();\r\n  }\r\n\r\n  //make letter elements in html\r\n  let createElementsInWrapper = word => {\r\n    for (let i = 1; i <= word.length; i++) {\r\n      // console.log(word[i - 1]);\r\n      makeNewDivElement('', `wrapper${i}`, 'puzzleWrapper', 'beforeend');\r\n      makeNewDivElement(word[i - 1], `letter${i}`, `wrapper${i}`, 'beforeend');\r\n      let randomMarginLeft = Math.round(Math.random() * 30);\r\n      let randomMarginTop = Math.round(Math.random() * 30);\r\n      document.querySelector(`#${`letter${i}`}`).style.marginLeft = `${randomMarginLeft}px`;\r\n      document.querySelector(`#${`letter${i}`}`).style.marginTop = `${randomMarginTop}px`;\r\n    }\r\n\r\n  }\r\n\r\n  //shuffle array\r\n  function shuffle(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n  }\r\n\r\n  //check letter clicked\r\n  let checkLetterClicked = e => {\r\n    let letterToClick = wAsArray[numberOfLettersShownNow];\r\n    console.log('first letter to be clicked:', letterToClick);\r\n\r\n    //if letter clicked\r\n    if (e.target.id.includes('letter') == true) {\r\n      // number = id[id.length - 1];\r\n      let letterClicked = e.target.innerHTML;\r\n      console.log('letter clicked:', letterClicked);\r\n\r\n      // check if correct letter clicked\r\n      if (letterClicked === letterToClick) {\r\n        // remove this letter and show it in main window\r\n\r\n        //add letter in html\r\n        if (numberOfLettersShownNow + 1 < wAsArray.length) {\r\n          wordTwoLettersShown += letterClicked;\r\n          document.querySelector('#wordTwo').textContent = wordTwoLettersShown + '...';\r\n        } else\r\n          if (numberOfLettersShownNow + 1 === wAsArray.length) {\r\n            console.log('GGGGGGGGGGGGGGGGGGG');\r\n            wordTwoLettersShown += letterClicked;\r\n\r\n            if (wAsArray.length < word.length) {\r\n              document.querySelector('#wordTwo').textContent = wordTwoLettersShown + '...';\r\n            } else {\r\n              document.querySelector('#wordTwo').textContent = wordTwoLettersShown;\r\n              showPageTwo();\r\n            }\r\n\r\n            document.querySelector('#puzzleWrapper').remove();\r\n            lettersBubblesActive = false;\r\n          }\r\n        e.target.remove();\r\n        // letterNumberToBeTyped++;\r\n        numberOfLettersShownNow++;\r\n        console.log('number of letters shown:', numberOfLettersShownNow);\r\n        console.log('array length:', wAsArray.length);\r\n\r\n\r\n\r\n      } else {\r\n        //make letter red for a sec.\r\n      }\r\n\r\n\r\n\r\n\r\n    } else {\r\n      console.log('sth else clicked');\r\n    }\r\n\r\n    // console.log(number);\r\n    // console.log(wAsArray);\r\n    // console.log(wShuffled);\r\n  }\r\n\r\n\r\n\r\n  //////////// MAIN\r\n  let wUse = getWordToWorkWith(word);\r\n  maxNumberOfBubbleLetters = wUse.length;\r\n\r\n  ////making an array(s)\r\n  let wAsArray = wUse.split('');\r\n  let wNumberedArray = [];\r\n\r\n  //remove first letters if used already\r\n  // wAsArray.splice(0, numberOfLettersShownNow);\r\n\r\n  // make doubled array template;\r\n  let nr = 1;\r\n  wAsArray.forEach(element => {\r\n    wNumberedArray[nr - 1] = [nr, element];\r\n    nr++;\r\n  });\r\n\r\n  let shuffledNumberedArray = [...wNumberedArray];\r\n  shuffle(shuffledNumberedArray);\r\n  wShuffledNumbers = [];\r\n  let wShuffled = [];\r\n  // let wShorer = [];\r\n  // let nrArray = [];\r\n  shuffledNumberedArray.forEach(el => {\r\n    wShuffledNumbers.push('');\r\n  })\r\n  let counterX = 1;\r\n  shuffledNumberedArray.forEach(el => {\r\n    wShuffled.push(el[1]);\r\n    wShuffledNumbers[el[0] - 1] = counterX;\r\n    // nrArray[counterX - 1] = el[0];\r\n    counterX++;\r\n  })\r\n  console.log('- ID: \"letterX\" to delete,in order----', wShuffledNumbers);\r\n  // console.log('-----------------------', shuffledNumberedArray);\r\n\r\n\r\n  // console.log('vvvvvvv-----------------', wShuffled);\r\n  // for (let i = numberOfLettersShownNow; i >=1 ; i--){\r\n  // if (wShuffledNumbers[])\r\n  // }\r\n\r\n\r\n\r\n  // copyMayBeShorterIfHintsUsed.splice(0, numberOfLettersShownNow);\r\n  // console.log('vvvvvvv-----------------', copyMayBeShorterIfHintsUsed);\r\n\r\n  makeNewDivElement('', 'puzzleWrapper', 'words', 'afterend');\r\n  createElementsInWrapper(wShuffled); //id's: letter1 ...\r\n\r\n  //remove used hint elements\r\n  for (let i = 1; i <= numberOfLettersShownNow; i++) {\r\n    console.log('#############', i);\r\n    document.querySelector(`#letter${wShuffledNumbers[i - 1]}`).remove();\r\n  }\r\n\r\n  // let letterNumberToBeTyped = 1;\r\n  // let lettersToShow = '';\r\n\r\n  //set up listener\r\n\r\n  document.querySelector('#puzzleWrapper').addEventListener('click', checkLetterClicked);\r\n\r\n\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/////////// F LEVELS - TIMES\r\n// to bigger time units  -return array\r\nlet now = new Date().getTime();\r\n// console.log('current time: ', now);\r\n\r\nlet toBiggerUnits = (unitsBefore, chunks) => {\r\n  let biggerUnits = Math.floor(unitsBefore / chunks);\r\n  let unitsAfter = unitsBefore % chunks;\r\n  let array = [biggerUnits, unitsAfter];\r\n  return array;\r\n}\r\n// convert timeStamp to message\r\nlet timeStampToMessage = (timeStamp) => {\r\n  // let stringTemplate = ' Due again in ';\r\n  let string = '';\r\n  let sec = Math.round(timeStamp / 1000);\r\n  let minBefore = Math.floor(sec / 60);\r\n  sec = sec % 60;\r\n  let min = toBiggerUnits(minBefore, 60)[1];\r\n  let hoursBefore = toBiggerUnits(minBefore, 60)[0];\r\n\r\n  let hours = toBiggerUnits(hoursBefore, 24)[1];\r\n  let daysBefore = toBiggerUnits(hoursBefore, 24)[0];\r\n\r\n  let days = toBiggerUnits(daysBefore, 365)[1];\r\n  let yearsBefore = toBiggerUnits(daysBefore, 24)[0];\r\n  if (days > 0) { string += `${days} day`; if (days > 1) { string += 's' }; }\r\n  else if (hours > 0) { string += `${hours} hour`; if (hours > 1) { string += 's' }; }\r\n  else if (min > 0) { string += `${min} minute`; if (min > 1) { string += 's' }; }\r\n  else if (sec > 0) { string += `${sec} second`; if (sec > 1) { string += 's' }; }\r\n  // string = stringTemplate + string;\r\n  return string;\r\n}\r\n\r\n\r\n\r\n//////// levels - times - MAIN\r\nlet arrayTimes = [];\r\nlet timeCounter = 1000;\r\n// let timeCounter = 10000;\r\nlet oneArray = [];\r\nlet levelLearned = 11; //if level 11 --> label as learned\r\n\r\n// for (let i = 1; i < levelLearned; i++) {\r\n//   arrayTimes.push(timeCounter);\r\n//   timeCounter = timeCounter * 5;\r\n// }\r\n\r\n// for (let i = 1; i < levelLearned; i++) {\r\n//   arrayTimes.push(timeCounter);\r\n// }\r\n\r\n\r\narrayTimes = [\r\n  1000 * 10,  //sec     L0\r\n  1000 * 50,\r\n  60000 * 5, //min\r\n  3600000 * 1, //hours\r\n  3600000 * 6,\r\n  3600000 * 22,  //L5\r\n  3600000 * 22,\r\n  86400000 * 2, //days\r\n  86400000 * 5,\r\n  86400000 * 15,  //    L9 adds this much time (first level is updated, then this time is added based on current level)\r\n  86400000 * 45,\r\n]\r\n// console.log('level 9  adds ', arrayTimes[9], \" ms to now time\");\r\n\r\n// arrayTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n// console.log('array of times for levels:');\r\n// console.log(arrayTimes);\r\narrayTimes.forEach((time) => {\r\n  // console.log(time);\r\n  // timeStampToMessage(time);\r\n  oneArray += [`${timeStampToMessage(time)}; `];\r\n});\r\nconsole.log(oneArray);\r\n\r\n\r\n\r\n//////////////////////////////////EXTRA\r\n// show all cards\r\n// let showAllCards = async () => {\r\n//   console.log('in show All cards F');\r\n//   let dataAll = await cards.get();\r\n//   let cardsInfo = dataOrdered.docs.forEach(doc => {\r\n//     console.log(doc);\r\n//   })\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////// F SET UP\r\n// F delete card\r\nlet deleteCard = async () => {\r\n  console.log('ready to delete card');\r\n  console.log(currentCardID);\r\n  await cards.collection(\"cardsLearningNotDue\").doc(currentCardID).delete(); //deleting in both piles in case action was initialized through adjusting cards in one of the 2 packs\r\n  cards.collection(\"cardsLearningDue\").doc(currentCardID).delete().then(() => {\r\n    // console.log('deleted');\r\n    alertUserForSec(\"Deleted\", 0.8);\r\n    document.querySelector('#changeWords .optionsWindow').style.display = 'none';\r\n\r\n    // await new Promise(resolve => setTimeout(resolve, 800));\r\n    updateDatabaseTHEN_UI();\r\n    scroll(0, scrollAmount);\r\n  });\r\n}\r\n\r\n\r\n\r\n// F-update and Count Due\r\nlet updateDue = async data => {\r\n  let now = new Date().getTime();\r\n  dueCount = 0;\r\n  // console.log('L1-1-1: starting \"updateDue\" in MAIN-ASYNC');\r\n  // let dueToUpdate = await cards.where('mainStage', '==', 'learning').where('due', '==', false).where('dueTime', '<', now);\r\n  let dueToUpdate = await cards.collection(\"cardsLearningNotDue\").where('dueTime', '<', now);\r\n  let ddData = await dueToUpdate.get();\r\n  // console.log('cards which are going to have DUE changed to TRUE:');\r\n\r\n  // this promise is not usefull, it doesn't wait for the updated cards anyway\r\n  // return new Promise((resolve, reject) => {\r\n  ddData.docs.forEach((docC) => {\r\n    // console.log(doc.data());\r\n    let cardToMove = docC.data();\r\n    // console.log(cardToMove);\r\n    // console.log(docC.id);\r\n    cards.collection(\"cardsLearningDue\").doc(docC.id).set(cardToMove).then(() => {\r\n      cards.collection(\"cardsLearningNotDue\").doc(docC.id).delete();\r\n      // console.log('------- CARD MOVED TO DUE GROUP qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq');\r\n\r\n    });\r\n  });\r\n  // cards.collection(\"cardsLearningNotDue\").doc(doc.id).update({ due: true }).then(function () { console.log('XXXXXXXXupdating \"due status\" finishedXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'); });\r\n  // cards.collection(\"cardsLearningDue\").add()\r\n\r\n  // resolve('due statuses hopefully updated!!!!!!!!!!!!!!!!!!!!!!!!!!!!!');\r\n  // });\r\n\r\n\r\n  // wait 200ms after updating due times so that due card can be loaded \r\n  if (ddData.docs.length > 0) {\r\n    await new Promise(resolve => {\r\n      setTimeout(resolve, 200);\r\n    });\r\n  }\r\n\r\n};\r\n\r\n\r\n// get current card from DUE\r\nlet getCardFromDue = async () => {\r\n  // console.log('starting get card from Due');\r\n  // console.log('------- STARTING TO GET CARD FROM DUE GROUP qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq');\r\n\r\n  // let dataOrdered = await cards.where('mainStage', '==', 'learning').where('due', '==', true).orderBy('lastSeen', \"desc\").limit(1).get();\r\n  let dataOrdered = await cards.collection(\"cardsLearningDue\").orderBy('lastSeen', \"desc\").limit(1).get();\r\n  // console.log('dataOrdered:', dataOrdered.docs.length);\r\n  if (dataOrdered.docs.length == 0) { console.log('no DUE card right NOW.'); dueCount = 0; }\r\n  else {\r\n    currentCard = dataOrdered.docs[0].data();\r\n    currentCardID = dataOrdered.docs[0].id;\r\n    // let cardMoveHere = await cards.collection(\"cardsLearningNotDue\").doc(currentCardID).set(currentCard).then(() => {\r\n    //   cards.collection(\"cardsLearningDue\").doc(currentCardID).delete();\r\n    //   // console.log('------- CARD MOVED TO DUE GROUP qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq');\r\n    // });\r\n\r\n    // let cardToMove = await cards.collection(\"cardsLearningDue\").\r\n    dueCount = 1;\r\n    // console.log('because DUE card was found, \"current card\" was updated.', currentCard, \"card's ID: \", currentCardID);\r\n  }\r\n  return currentCard;\r\n}\r\n\r\nlet moveCardFromPileToLEarningPile = async (card1, colToRemoveFrom) => {\r\n  console.log(\"1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\")\r\n\r\n  let now = new Date().getTime();\r\n  currentCard = card1.docs[0].data();\r\n  console.log(currentCard);\r\n  currentCardID = card1.docs[0].id;\r\n  currentCard.mainStage = 'learning';\r\n  currentCard.lastSeen = now;\r\n  currentCard.dueTime = now;\r\n  // let cardMoveHere = await cards.collection(\"cardsLearningNotDue\").doc(currentCardID).set(currentCard).then(() => {\r\n  let cardMoveHere = await cards.collection(\"cardsLearningDue\").doc(currentCardID).set(currentCard).then(() => {\r\n    cards.collection(colToRemoveFrom).doc(currentCardID).delete();\r\n    // console.log('------- CARD MOVED TO DUE GROUP qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq');\r\n  });\r\n  wordsBackground = \"new\";\r\n  toLearnCount = 1;\r\n  console.log('because TO LEARN card was found, \"current card\" was updated.', currentCard, \"card's ID: \", currentCardID);\r\n}\r\n\r\n// get \"to learn\" card - first try NEXT pile, then toLearn pile\r\nlet getCardFromToLearn = async (cards) => {\r\n  // console.log('L1-1-4 STARTING getting ToLEARN card.');\r\n  // let checkIfACardFromToLearn = await cards.where('mainStage', '==', 'to learn').limit(1).get();\r\n\r\n  let checkIfACardFromToLearn = await cards.collection(\"cardsToLearnNext\").limit(1).get();\r\n  if (checkIfACardFromToLearn.docs.length == 0) {\r\n    console.log(\"BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\")\r\n    checkIfACardFromToLearn = await cards.collection(\"cardsToLearn\").limit(1).get();\r\n    if (checkIfACardFromToLearn.docs.length == 0) { console.log('no card \"TO LEARN\" right NOW.'); toLearnCount = 0; }\r\n    else {\r\n      //remove also card from toLearn (not next)\r\n      await moveCardFromPileToLEarningPile(checkIfACardFromToLearn, \"cardsToLearn\");\r\n    }\r\n\r\n  }\r\n  else { //remove also card from toLearnNext\r\n    console.log(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\")\r\n    console.log(\"ahoj\")\r\n    await moveCardFromPileToLEarningPile(checkIfACardFromToLearn, \"cardsToLearnNext\");\r\n  }\r\n}\r\n\r\n/////////////////////////////// F-Main async\r\nlet updateDataReturnCard = async () => {\r\n  wordsBackground = \"normal\"; //updating info about if current word is from TO LEARN pile\r\n  // console.log('STARTING GET CARD main f.a');\r\n  let currentCardOrNull = await updateDue();\r\n  // console.log(currentCardOrNull, 'xxxxxxxxxxxxxxxxxxxxx');\r\n  let testIfACard = await getCardFromDue();\r\n  // updateDue().then(getCardFromDue());\r\n  // console.log('GetDueCard f. finished, current dueCount: ', dueCount, 'toLearnCount: ', toLearnCount);\r\n  if (dueCount === 0) {\r\n    // console.log('we will start GetToLEarnCard f. now...');\r\n    let xXx = await getCardFromToLearn(cards);\r\n    if (toLearnCount > 0) {\r\n      return currentCard;\r\n    } else { return 'no card to use.'; }\r\n  }\r\n  else { return currentCard; }\r\n}\r\n\r\n\r\n\r\n\r\n///////////////////////////// UI\r\nlet assignWordsAndColours = (currentCard) => {\r\n  // console.log('1.2.1.1 assign words');\r\n  // console.log(currentCard.enCheck);\r\n  let en = currentCard.enCheck;\r\n  Object(_wordsOptions__WEBPACK_IMPORTED_MODULE_1__[\"refreshOptions\"])(currentCard, currentCardID, userInfo);\r\n\r\n  if (en) {\r\n    // wordOne = currentCard.czWord;\r\n    wordOne = currentCard.languageToLearn;\r\n    // wordTwo = currentCard.enWord;\r\n    wordTwo = currentCard.languageNative;\r\n\r\n    firstWordHTML.style.color = 'blue';\r\n    secondWordHTML.style.color = 'red';\r\n    showNativeWordFirst = false;\r\n  } else {\r\n    // wordOne = currentCard.enWord;\r\n    wordOne = currentCard.languageNative;\r\n    // wordTwo = currentCard.czWord;\r\n    wordTwo = currentCard.languageToLearn;\r\n    // console.log(wordTwo, 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM');\r\n\r\n    firstWordHTML.style.color = 'red';\r\n    secondWordHTML.style.color = 'blue';\r\n    showNativeWordFirst = true;\r\n  }\r\n  // console.log('1.2.1.1 word 1 is:', wordOne);\r\n  // console.log('1.2.1.1 word 2 is:', wordTwo);\r\n\r\n  maxNumberOfBubbleLetters = getWordToWorkWith(wordTwo).length;\r\n\r\n}\r\n\r\n\r\n\r\nlet showThreeButtons = () => {\r\n  nextBt.style.display = 'none';\r\n  threeBt.style.display = 'flex';\r\n}\r\n\r\nlet jumpLevels = (level) => {\r\n  console.log('');\r\n  console.log('starting F timeJump');\r\n  console.log(`current card level: ${level}, enCheck: ${currentCard.enCheck}.`);\r\n  let now = new Date().getTime();\r\n  let timeJump = now - currentCard.lastSeen;\r\n  console.log(`card last time seen ${timeStampToMessage(timeJump)}`);\r\n  console.log('since last time seen: ', timeJump);\r\n  console.log('next tie should be seen in:', arrayTimes[level]);\r\n\r\n  while (timeJump > arrayTimes[level]) {\r\n    level++;\r\n    score++;\r\n    if (level === levelLearned - 1) { break; }; //you can jump max to level Learned-1 (9)\r\n  }\r\n  console.log('Ending F timeJump');\r\n  console.log(`current card level: ${level}, enCheck: ${currentCard.enCheck}.`);\r\n  return level;\r\n}\r\n\r\n\r\nlet hintNotUsed = () => {\r\n  console.log('checking cheating (needs to be 1..499 for cheating to be true');\r\n  console.log(clickHintCounter);\r\n  if (clickHintCounter > 1 && clickHintCounter < 500) { return false }\r\n  else { return true };\r\n}\r\n\r\nlet updateCurrentCard = (e) => {\r\n  console.log('updateCurrenCard F running', currentCard);\r\n  let en = currentCard.enCheck;\r\n  let lev = currentCard.level;\r\n  // console.log('level before:', lev);\r\n  let origScore = score;\r\n  if (e.target.id === 'BtnDown') {\r\n    // if (lev > 1) { score = score - 2; };\r\n    // if (lev === 1) {\r\n    //   score = score - 1;\r\n    // };\r\n    // lev = lev > 2 ? lev - 2 : 0;\r\n    score -= lev;\r\n    // alert(`score lowered by ${lev}, lev going down to 0.`);\r\n    lev = 0;\r\n  }\r\n  else if (e.target.id === 'BtnStay') {\r\n    // lev = lev > 1 ? lev - 1 : 0;\r\n\r\n    // if (lev > 2) {\r\n    //   lev -= 2;\r\n    //   score = score - 2;\r\n    // } else {  //lev 1 or 0...\r\n    //   score -= lev - 1;\r\n    //   lev -= lev - 1;  //L2-1 ->L1; L1-0 ->L1\r\n    // }\r\n\r\n    score = score - Math.floor(lev / 2);\r\n    lev = Math.ceil(lev / 2);\r\n  }\r\n\r\n  // correct Ans\r\n  else if (e.target.id === 'BtnUp') {\r\n    if (hintNotUsed()) {\r\n      // console.log('updating level on variable inside programme');\r\n      // console.log('original level:', lev, 'original enCheck (on variable):', en, 'on current card(to double check):', currentCard.enCheck);\r\n\r\n\r\n      if (en === true) {\r\n        lev++;\r\n        score++;\r\n        // console.log('level en is originaly true - now=', lev);\r\n        en = false;\r\n      } else {\r\n        // console.log('level if en is false - now=', lev);\r\n\r\n        en = true;\r\n      }\r\n\r\n      if (lev < levelLearned - 1) lev = jumpLevels(lev); // level has to be 2+smaller(8 or smaller) to go into jump consideration\r\n\r\n      // console.log('updated level(in variable):', lev, 'updated enCheck:', en);\r\n    } else {\r\n      // alert('STOP CHEATING, I know you used a hint!;-)');\r\n      // alertUserForSec('CHEATING!', 1.5);\r\n    }\r\n  }\r\n  else {\r\n    //=\"slow\" button pushed\r\n    // en = !en;\r\n    if (lev > 0) { lev--; score--; }\r\n  }\r\n\r\n  ////show score change:\r\n  // let scoreChange = '';\r\n  // if (score > origScore) { scoreChange = '+' };\r\n  // alertUserForSec(`${scoreChange} ${score - origScore}`, 0.3);\r\n\r\n  currentCard.enCheck = en;\r\n  currentCard.level = lev;\r\n  // console.log('level after:', lev);\r\n\r\n  let now = new Date().getTime();\r\n  currentCard.lastSeen = now;\r\n  currentCard.due = false;\r\n\r\n  // card learned/not learned:\r\n  if (lev < levelLearned) {\r\n    let posponedTime = Object(_wordsOptions__WEBPACK_IMPORTED_MODULE_1__[\"getPosponeTime\"])();\r\n    currentCard.dueTime = now + posponedTime + arrayTimes[lev];\r\n    if (posponedTime > 0) {\r\n      alertUserForSec('Card posponed.', 1);\r\n    }\r\n\r\n  }\r\n  else if (lev == levelLearned) {\r\n    // currentCard.level = 888;\r\n\r\n    // currentCard.mainStage = 'learned';\r\n    // console.log('card labeled learned');\r\n    // console.log(currentCard);\r\n    // alert('Congrats -this card was added to \"learned\" pile.');\r\n    alertUserForSec('Congrats! - Card learned.', 2);\r\n  }\r\n}\r\n\r\nlet updateCardInFirebase = async () => {\r\n  // console.log('card to be updated like this:');\r\n  // console.log(currentCard);\r\n  // await cards.doc(currentCardID).update({\r\n\r\n  if (currentCard.level != levelLearned) {\r\n    // console.log('card shall be updated like this: UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU');\r\n    // console.log(currentCard);\r\n    await cards.collection(\"cardsLearningNotDue\").doc(currentCardID).set(currentCard);\r\n    await cards.collection(\"cardsLearningDue\").doc(currentCardID).delete();\r\n  };\r\n  if (currentCard.level == levelLearned) {\r\n    await cards.collection(\"cardsLearned\").doc(currentCardID).set(currentCard).then(() => {\r\n      cards.collection(\"cardsLearningDue\").doc(currentCardID).delete();\r\n    });\r\n  }\r\n\r\n  // update({\r\n  //     enCheck: currentCard.enCheck,\r\n  //   level: currentCard.level,\r\n  //   lastSeen: currentCard.lastSeen,\r\n  //   due: currentCard.due,\r\n  //   dueTime: currentCard.dueTime,\r\n  //   mainStage: currentCard.mainStage\r\n  // });\r\n  // console.log(' card in FIREBASE updated');\r\n\r\n\r\n\r\n  // console.log('points BEFORE upoading to DB and before adding gained score from last card: 1ppppppppppppppppppppppppppppppppppppppppppppppppp');\r\n  // console.log(points);\r\n  // console.log('adjust by score:', score);\r\n  Object(_stopwatchPoints__WEBPACK_IMPORTED_MODULE_0__[\"updatePoints\"])(score, points, cards)\r\n    .then(pointsReturned => {\r\n      points = pointsReturned;\r\n      score = 0;\r\n\r\n      // console.log('points returned to MAIN after updated in DB: 2ppppppppppppppppppppppppppppppppppppppppppppppppp');\r\n      // console.log(points);\r\n    });\r\n}\r\n\r\n\r\n// update ALL from second page to new card\r\nlet updateALL = async (e) => {\r\n  // console.log('this was clicked:');\r\n  // console.log(e.target.parentNode.id);\r\n\r\n  //update html element in decks of words  -adjusted word\r\n  if (updateThisHTMLIdAfterUpdate != null) {\r\n    console.log(\"XXXXXXXXXXXXXXXXXXXXXXXX\")\r\n    console.log(currentCard)\r\n    console.log(\"XXXXXXXXXXXXXXXXXXXXXXXX\")\r\n\r\n    document.querySelector(`#${updateThisHTMLIdAfterUpdate}adjust`).previousElementSibling.innerHTML = currentCard.languageToLearn;\r\n    document.querySelector(`#${updateThisHTMLIdAfterUpdate}adjust`).previousElementSibling.previousElementSibling.innerHTML = currentCard.languageNative;\r\n    updateThisHTMLIdAfterUpdate = null;\r\n  }\r\n\r\n  updateCurrentCard(e);\r\n  await updateCardInFirebase();\r\n\r\n\r\n  // console.log('GOING TO UPDATE DATABASE AGAIN...');\r\n  // if (e.target.id === 'BtnDown' || e.target.id === 'BtnStay') {\r\n  //   document.querySelector('#improveChallengeButtons').style.display = \"flex\";\r\n  //   document.querySelector('#threeButtons').style.display = 'none';\r\n  // } \r\n  updateDatabaseTHEN_UI();\r\n\r\n}\r\n\r\nlet setEvaluateButtonsOpacity = (oDown, oStay, oSlow, oUp) => {\r\n  if (oDown < 2) { document.querySelector('#BtnDown').style.opacity = oDown; }\r\n  if (oStay < 2) { document.querySelector('#BtnStay').style.opacity = oStay; }\r\n  if (oSlow < 2) { document.querySelector('#BtnSlow').style.opacity = oSlow; }\r\n  if (oUp < 2) { document.querySelector('#BtnUp').style.opacity = oUp; }\r\n}\r\n\r\n// HINTS on p1:   show LETTER on click as \r\nlet ShowLetterOnClick = () => {\r\n  clickHintCounter++;\r\n\r\n  if (clickHintCounter > 1) {\r\n    setEvaluateButtonsOpacity(0.9, 0.9, 0.3, 0.3);\r\n\r\n    // if (clickHintCounter >= wordTwo.length - 1) {\r\n    //   setEvaluateButtonsOpacity(0.9, 0.3, 0.3, 0.3);\r\n    // }\r\n  }\r\n\r\n  if (lettersBubblesActive === true && numberOfLettersShownNow < maxNumberOfBubbleLetters) {\r\n    document.querySelector(`#letter${wShuffledNumbers[numberOfLettersShownNow]}`).remove();\r\n  }\r\n\r\n  // console.log('you just clicked on hint');\r\n  if (numberOfLettersShownNow + 1 < wordTwo.length) {\r\n    wordTwoLettersShown += wordTwo[numberOfLettersShownNow];\r\n    secondWordHTML.textContent = wordTwoLettersShown + '...';\r\n  }\r\n  if (numberOfLettersShownNow + 1 === wordTwo.length) {\r\n    secondWordHTML.textContent = wordTwo;\r\n    showPageTwo();\r\n  }\r\n\r\n  numberOfLettersShownNow++;\r\n  console.log('hint counter in function:', clickHintCounter);\r\n  console.log('shown letters counter in function:', numberOfLettersShownNow);\r\n\r\n  if (numberOfLettersShownNow >= maxNumberOfBubbleLetters) {\r\n    document.querySelector('#showLettersWrapper').style.display = 'none';\r\n  }\r\n}\r\n\r\nlet ResetLettersOnClick = () => {\r\n  clickHintCounter = 0;\r\n  wordTwoLettersShown = '';\r\n}\r\nlet showLevel = () => {\r\n  if (currentCard.enCheck === false) { levelIndicator.innerHTML = `level ${currentCard.level}-A` }\r\n  else { levelIndicator.innerHTML = `level ${currentCard.level}-B` }\r\n  // console.log(currentCard.enCheck);\r\n}\r\n\r\n\r\n// not activated\r\n\r\n\r\nlet preventScroll = e => { e.preventDefault(); }\r\n\r\n// PAGES\r\nlet showPageOne = async () => {\r\n  // console.log('page one Activated');\r\n\r\n  // speak the word if Language-to-learn displayed\r\n  // responsiveVoice.speak(\"hello world\");\r\n  //   https://responsivevoice.org/api/\r\n\r\n\r\n  assignWordsAndColours(currentCard);  // which word to speak first also decided here\r\n  firstWordHTML.textContent = wordOne;\r\n  secondWordHTML.textContent = '...';\r\n  setEvaluateButtonsOpacity(0.9, 0.9, 0.9, 0.9);\r\n  nextBt.style.display = 'block';\r\n  threeBt.style.display = 'none';\r\n  document.querySelector('#BtnDown').style.display = 'block';\r\n  document.querySelector('#BtnSlow').style.display = 'block';\r\n\r\n  // posponeAdjusted = false;\r\n\r\n  // prevent scrolling on second word:\r\n  secondWordHTML.addEventListener('touchmove', preventScroll);\r\n  document.querySelector('#showLettersWrapper').style.display = 'flex';\r\n\r\n  // **\r\n  // SPEAKING\r\n  if (!showNativeWordFirst && !languageSwap) {\r\n    // console.log('LANGUAGE -not swapped- TO SPEAK now', responsiveVoiceLanguage);\r\n    let cekej = await responsiveVoice.speak(wordOne, responsiveVoiceLanguage);\r\n  }\r\n  if (showNativeWordFirst && languageSwap) {\r\n    // console.log('LANGUAGE -swapped- TO SPEAK now', responsiveVoiceLanguage);\r\n    let cekejToo = await responsiveVoice.speak(wordOne, responsiveVoiceLanguage);\r\n    // console.log(responsiveVoice.speak(wordOne, responsiveVoiceLanguage));\r\n  }\r\n\r\n  //hide one of the evaluating buttons\r\n  if (currentCard.level < 4) {\r\n    document.querySelector('#BtnSlow').style.display = 'none';\r\n  } else {\r\n    document.querySelector('#BtnDown').style.display = 'none';\r\n  }\r\n\r\n\r\n\r\n\r\n  // activating letter hints\r\n  clickHintCounter = 0;\r\n  wordTwoLettersShown = '';\r\n  // console.log('clickHintCounter: ', clickHintCounter);\r\n  secondWordHTML.addEventListener('click', ShowLetterOnClick);\r\n  showLevel();\r\n\r\n  //hide hint buttons and text by default\r\n  remindConnectButtonHTML.classList.add('hide');\r\n  remindButtonHTML.classList.add('hide');\r\n  remindConnectTextHTML.classList.add('hide');\r\n  remindTextHTML.classList.add('hide');\r\n\r\n  /////assign texts and show appropriate button\r\n  //assign connection text\r\n  if (currentCard.connection != undefined && currentCard.connection != '') {\r\n    remindConnectTextHTML.innerHTML = currentCard.connection;\r\n  }\r\n  //showing appropriate button\r\n  if (currentCard.languageNative == wordOne && currentCard.cReminderNativeShown != undefined && currentCard.cReminderNativeShown != '') {\r\n    //add text\r\n    remindTextHTML.innerHTML = currentCard.cReminderNativeShown;\r\n    //show button\r\n    remindButtonHTML.classList.remove('hide');\r\n  } else if (currentCard.cReminderToLearnShown != undefined && currentCard.cReminderToLearnShown != '') {\r\n    //add text\r\n    remindTextHTML.innerHTML = currentCard.cReminderToLearnShown;\r\n    //show button\r\n    remindButtonHTML.classList.remove('hide');\r\n  } else if (currentCard.connection != undefined && currentCard.connection != '') {\r\n    remindConnectButtonHTML.classList.remove('hide');\r\n  };\r\n\r\n\r\n  // **\r\n\r\n}\r\n\r\nlet showPageTwo = () => {\r\n  // console.log('Page two Activated.');\r\n  // secondWordHTML.onclick = null;\r\n  // secondWordHTML.removeEventListener();\r\n  // secondWordHTML.removeEventListener('click', e => ResetLettersOnClick());\r\n  // console.log('clickHint listener SHOUND be removed');\r\n  // console.log('current clickhintCouner=', clickHintCounter);\r\n  // clickHintCounter = 1000;\r\n\r\n  //sort bubble letters\r\n  if (lettersBubblesActive === true) { document.querySelector('#puzzleWrapper').remove(); }\r\n  document.querySelector('#showLettersWrapper').style.display = 'none';\r\n  lettersBubblesActive = false;\r\n\r\n\r\n  //activate scrolling and remove tapping on second word\r\n  secondWordHTML.removeEventListener('touchmove', preventScroll);\r\n  secondWordHTML.removeEventListener('click', ShowLetterOnClick);\r\n\r\n  console.log(wordTwo, 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');\r\n\r\n  //show connection text if exists\r\n  if (currentCard.connection != undefined && currentCard.connection != '') {\r\n    remindConnectButtonHTML.classList.remove('hide');\r\n    remindConnectTextHTML.classList.remove('hide');\r\n  };\r\n  // hide connection reminder\r\n  remindButtonHTML.classList.add('hide');\r\n  remindTextHTML.classList.add('hide');\r\n  // document.querySelector('#takeTimeReminder').style.opacity = \"1\";\r\n\r\n\r\n\r\n  secondWordHTML.textContent = wordTwo;\r\n\r\n  // SPEAKING\r\n  // for english speaking  users (Abi)...\r\n  if (showNativeWordFirst && !languageSwap) {\r\n    // console.log('LANGUAGE -not swapped- TO SPEAK now', responsiveVoiceLanguage);\r\n    responsiveVoice.speak(wordTwo, responsiveVoiceLanguage);\r\n  }\r\n  // for czech speaking  users (Me, Dana, Stana)...\r\n  if (!showNativeWordFirst && languageSwap) {\r\n    // console.log('LANGUAGE -swapped- TO SPEAK now', responsiveVoiceLanguage);\r\n    responsiveVoice.speak(wordTwo, responsiveVoiceLanguage);\r\n    // console.log(responsiveVoice.speak(wordOne, responsiveVoiceLanguage));\r\n  }\r\n\r\n  showThreeButtons();\r\n  Object(_wordsOptions__WEBPACK_IMPORTED_MODULE_1__[\"showOptions\"])();\r\n}\r\n\r\nlet updateScoreUI = () => {\r\n  scoreHTML.innerHTML = `<p>Session score: ${score}</p>`;\r\n}\r\n\r\n\r\n\r\n\r\nlet updateDatabaseTHEN_UI = () => {\r\n  updateScoreUI();\r\n  Object(_wordsOptions__WEBPACK_IMPORTED_MODULE_1__[\"hideOptions\"])();\r\n  // countCards(cards);\r\n  numberOfLettersShownNow = 0;\r\n  wordTwoLettersShown = '';\r\n\r\n  updateDataReturnCard().then((ans) => {\r\n    // console.log('FINISHING GET CARD main f.');\r\n    // console.log('current dueCount: ', dueCount, 'toLearnCount: ', toLearnCount);\r\n    // console.log('L1 \"updateDataReturnCard\" function finished.');\r\n    ResetLettersOnClick();\r\n    // console.log('Card got from database:', ans, typeof ans);\r\n    if (typeof ans === 'string') {\r\n      // console.log('string returned from main function');\r\n      nextBt.style.display = 'none';\r\n      threeBt.style.display = 'none';\r\n      firstWordHTML.innerHTML = '-';\r\n      secondWordHTML.innerHTML = '-';\r\n      // alert('You are out of cards to learn./some may be waiting/. Add/Make new cards to learn.');\r\n      if (window.alert('You are out of cards to learn./some may be waiting/. Add/Make new cards to learn.')) {\r\n        // window.location.href = 'index.html';\r\n      };\r\n      // window.open(/index.html);\r\n    }\r\n    console.log(currentCard);\r\n\r\n\r\n    if (typeof ans === 'object') {\r\n      if (wordsBackground == \"new\") {\r\n        wordsHTML.forEach(element => {\r\n          element.style.backgroundColor = 'white';\r\n        });\r\n        alertUserForSec(\"New Card\", 1);\r\n      } else if (currentCard.level == levelLearned - 1 && currentCard.enCheck == true) {\r\n        wordsHTML.forEach(element => {\r\n          element.style.backgroundColor = 'lightgreen';\r\n        });\r\n        alertUserForSec(\"1 step from learned:\", 1.4);\r\n      } else {\r\n        wordsHTML.forEach(element => {\r\n          // element.style.backgroundColor = 'rgb(255, 230, 0)';\r\n          element.style.backgroundColor = 'rgb(252, 240, 188)';\r\n        })\r\n      }\r\n      showPageOne();\r\n    }\r\n    // console.log('\"updateDatabaseTHEN_UI\" JUST FINISHING!!!!!!!!!!!!!!!!!!');\r\n  });\r\n}\r\n\r\n\r\n// F speaking \r\n\r\nlet setLanguagesToSpeak = async () => {\r\n  // console.log('starting SETTING LANGUAGE TO SPEAK:');\r\n\r\n  languageToSpeak = userInfo.langToLearn;\r\n  // console.log('language to speak:', languageToSpeak);\r\n\r\n  if (languageToSpeak === 'czech') {\r\n    responsiveVoiceLanguage = 'Czech Female';\r\n    // languageSwap = false;   //users with native English, not czech, like Abi\r\n  }\r\n  else if (languageToSpeak === 'english') { responsiveVoiceLanguage = 'UK English Female'; }\r\n  else if (languageToSpeak === 'french') { responsiveVoiceLanguage = 'French Female'; }\r\n  else if (languageToSpeak === 'german') {\r\n    responsiveVoiceLanguage = 'Deutsch Female';\r\n\r\n  }\r\n\r\n  // console.log('languageSwapp?', languageSwap, '; responsiveVoiceLanguage: ', responsiveVoiceLanguage);\r\n  // console.log('finishing SETTING LANGUAGE TO SPEAK:');\r\n  // console.log(userInfo.docs[0].data());\r\n  // languageToSpeak = \r\n}\r\n\r\n//////Add new words to learn\r\nlet activateNEwCardListener = (user) => {\r\n  let form = document.querySelector('#formNewWord');\r\n  form.addEventListener('submit', e => {\r\n    e.preventDefault();\r\n    let nativeInput = form.nativeInput.value;\r\n    let toLearnInput = form.toLearnInput.value;\r\n\r\n    let checkBoxCurrentPile = form.querySelector('input[name=\"collection\"]:checked').value;\r\n    // console.log(checkBoxCurrentPile)\r\n\r\n    // let checkBoxTraslationChecked = form.newWordTranslationCheckBox.checked;\r\n\r\n\r\n    // add new object into firebase\r\n\r\n    const newCard = {\r\n      languageNative: nativeInput,\r\n      languageToLearn: toLearnInput,\r\n      mainStage: 'to learn',\r\n      enCheck: false,\r\n      czCheck: false,\r\n      level: 0,\r\n      dueTime: 8888888888888,\r\n      due: false,\r\n      lastSeen: 8888888888888,\r\n      translationChecked: form.newWordTranslationCheckBox.checked\r\n    };\r\n\r\n    // db.collection(user.uid).add(newCard).then(() => {\r\n    //  new-DB-structure\r\n\r\n    if (checkBoxCurrentPile == \"LATER\") {\r\n      db.collection(\"users\").doc(user.email).collection(\"cardsToLearn\").add(newCard).then(() => {\r\n        console.log('Added');\r\n        alertUserForSec(\"Added to 'Later'.\", 1);\r\n      }).catch(err => {\r\n        console.log(err);\r\n        console.log('I could NOT add object into the database.');\r\n      });\r\n    } else if (checkBoxCurrentPile == \"NEXT\") {\r\n      db.collection(\"users\").doc(user.email).collection(\"cardsToLearnNext\").add(newCard).then(() => {\r\n        console.log('Added TO NEXT COLL');\r\n        alertUserForSec(\"Added to 'Next'.\", 1);\r\n      }).catch(err => {\r\n        console.log(err);\r\n        console.log('I could NOT add object into the database.');\r\n      });\r\n    } else if (checkBoxCurrentPile == \"NOW\") {\r\n      let now = new Date().getTime();\r\n      newCard.mainStage = \"learning\";\r\n      newCard.lastSeen = now;\r\n      newCard.dueTime = now; //if +10 000 = after 10 seconds\r\n      // console.log('current  new card:', newCard);\r\n      db.collection(\"users\").doc(user.email).collection(\"cardsLearningNotDue\").add(newCard).then(() => {\r\n        console.log('Flip-card added');\r\n        alertUserForSec(\"Added to 'Now'.\", 1);\r\n      }).catch(err => {\r\n        console.log(err);\r\n        console.log('I could NOT add object into the database.');\r\n      });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // if (checkBoxCurrentPile == false) {\r\n    //   db.collection(\"users\").doc(user.email).collection(\"cardsToLearn\").add(newCard).then(() => {\r\n    //     console.log('Added');\r\n    //     alertUserForSec(\"Added\", 1);\r\n    //   }).catch(err => {\r\n    //     console.log(err);\r\n    //     console.log('I could NOT add object into the database.');\r\n    //   });\r\n    // } else if (checkBoxCurrentPile == true) {\r\n    //   let now = new Date().getTime();\r\n    //   newCard.mainStage = \"learning\";\r\n    //   newCard.lastSeen = now;\r\n    //   newCard.dueTime = now; //if +10 000 = after 10 seconds\r\n    //   console.log('current  new card:', newCard);\r\n    //   db.collection(\"users\").doc(user.email).collection(\"cardsLearningNotDue\").add(newCard).then(() => {\r\n    //     console.log('Flip-card added');\r\n    //     alertUserForSec(\"Added\", 1);\r\n    //   }).catch(err => {\r\n    //     console.log(err);\r\n    //     console.log('I could NOT add object into the database.');\r\n    //   });\r\n    // }\r\n\r\n    // reset form\r\n    form.reset();\r\n    // document.querySelector(\"#formNewWord_NativeInput\").focus();\r\n  })\r\n}\r\n\r\n// short alert\r\nlet alertUserForSec = async (text, durationInSec) => {\r\n  let alertForSec = document.createElement('p');\r\n  // alertForSec.textContent = text;\r\n  alertForSec.innerHTML = text;\r\n  alertForSec.id = \"alertForSec\";\r\n  // alertForSec.classList.add(\"flyingAlert\");\r\n  alertForSec.style.animationDuration = durationInSec + \"s\";\r\n  let hook = document.querySelector(\"#words\");\r\n  hook.append(alertForSec);\r\n  await new Promise(resolve => setTimeout(resolve, durationInSec * 1000));\r\n  // console.log('XXXXXXXXXXX alert pop up');\r\n  document.querySelector(\"#alertForSec\").remove();\r\n}\r\n\r\n\r\n//////////////////////////////// MAIN\r\n// console.log('getting to listening to al cards click1');\r\nauth.onAuthStateChanged(async (user) => {\r\n  if (user) {\r\n    activateNEwCardListener(user); //to listen to cards which user could later create\r\n    userID = user.uid;\r\n    cards = db.collection(\"users\").doc(user.email);\r\n\r\n\r\n    // updates the points in/from DB and then in UI (if day is new), ans sets session score to 0;\r\n    Object(_stopwatchPoints__WEBPACK_IMPORTED_MODULE_0__[\"stopwatchPointsInit\"])(cards).then((pointsReturned) => {\r\n      points = pointsReturned;\r\n    });\r\n\r\n    Object(_stopwatchPoints__WEBPACK_IMPORTED_MODULE_0__[\"stopWatchInit\"])(cards);\r\n\r\n\r\n    // userInfo = await\r\n    cards.collection(\"about\").doc(\"info\").get().then((userDoc) => {\r\n      // loggedStatus.innerHTML = `<p>Enjoy ${user.email}!</p>`\r\n      userInfo = userDoc.data();\r\n      Object(_wordsOptions__WEBPACK_IMPORTED_MODULE_1__[\"activateUserInOptions\"])(userInfo, cards);\r\n      loggedStatus.innerHTML = `<p>Enjoy ${userInfo.username}!</p>`\r\n      setLanguagesToSpeak().then(() => {\r\n        updateDatabaseTHEN_UI();\r\n      });\r\n    });\r\n\r\n\r\n  } else {\r\n    loggedStatus.innerHTML = '<p>Stranger Enjoy!</p>';\r\n\r\n    let formatGuestCards = async () => {\r\n      console.log('XXXXXXXXXXXXXX formating  guest cards');\r\n\r\n      ////// guest cards in guest1 are deleted, then new are created (in guest1) from guestDefault\r\n      //F. delete original cards\r\n      let deleteCardsInCollection = async (colName) => {\r\n        let pathXX = db.collection(\"guests\").doc(\"guest1\");\r\n        pathXX.collection(colName).get().then((data) => {\r\n          data.docs.forEach(doc => {\r\n            console.log('deleting card...');\r\n            pathXX.collection(colName).doc(doc.id)\r\n              .delete();\r\n          })\r\n        });\r\n      }\r\n\r\n      //F. create new cards for guest1\r\n      let copyCards = async (coll) => {\r\n        // let oldCardsC = await db.collection(\"guests\").doc(\"guestDefault\").collection(\"cardsToLearn\").get();\r\n        let oldCardsC = await db.collection(\"guests\").doc(\"guestDefault\").collection(coll).get();\r\n        let newCardsD = db.collection(\"guests\").doc(\"guest1\");\r\n        oldCardsC.docs.forEach(doc => {\r\n          newCardsD.collection(coll).add(doc.data());\r\n          console.log('creating card...');\r\n        });\r\n      }\r\n      let copyUserData = async (coll) => {\r\n        // let oldCardsC = await db.collection(\"guests\").doc(\"guestDefault\").collection(\"cardsToLearn\").get();\r\n        let oldCardsC = await db.collection(\"guests\").doc(\"guestDefault\").collection(coll).get();\r\n        let newCardsD = db.collection(\"guests\").doc(\"guest1\");\r\n        oldCardsC.docs.forEach(doc => {\r\n          newCardsD.collection(coll).doc(doc.id).set(doc.data());\r\n          console.log('creating card...');\r\n        });\r\n      }\r\n\r\n      // !!!! await Promise.all here seem not working, but in general it seems all working anyway so i will not change it...\r\n      console.log('starting deleting original cards...');\r\n      await Promise.all([deleteCardsInCollection(\"cardsLearningNotDue\"), deleteCardsInCollection(\"cardsLearningDue\"), deleteCardsInCollection(\"cardsToLearn\"), deleteCardsInCollection(\"cardsLearned\"), deleteCardsInCollection(\"about\")]);\r\n      console.log(\"cards in guest 1 hopefully deleted.\");\r\n\r\n      await copyCards(\"cardsToLearn\");\r\n      await copyUserData(\"about\");\r\n      console.log(\"new cards in guest1 created.\");\r\n\r\n      await db.collection(\"guests\").doc(\"guest1\").collection(\"about\").doc(\"points\").update({\r\n        lastActiveDay: _stopwatchPoints__WEBPACK_IMPORTED_MODULE_0__[\"daysSince1970Floored\"]\r\n      });\r\n    }\r\n\r\n    await formatGuestCards();\r\n    console.log('more stuff happening...');\r\n\r\n    // userID = user.uid;  - asi ani neni potreba\r\n    cards = db.collection(\"guests\").doc(\"guest1\");\r\n\r\n\r\n    // updates the points in/from DB and then in UI (if day is new), ans sets session score to 0;\r\n    Object(_stopwatchPoints__WEBPACK_IMPORTED_MODULE_0__[\"stopwatchPointsInit\"])(cards).then((pointsReturned) => {\r\n      points = pointsReturned;\r\n    });\r\n    Object(_stopwatchPoints__WEBPACK_IMPORTED_MODULE_0__[\"stopWatchInit\"])(cards);\r\n\r\n\r\n    // loggedStatus.innerHTML = `<p>Enjoy ${user.email}!</p>`\r\n    userInfo = {\r\n      langNative: \"english\",\r\n      langToLearn: \"czech\",\r\n    };\r\n    Object(_wordsOptions__WEBPACK_IMPORTED_MODULE_1__[\"activateUserInOptions\"])(userInfo, cards);\r\n    // loggedStatus.innerHTML = `<p>Enjoy ${userInfo.username}!</p>`\r\n    setLanguagesToSpeak().then(() => {\r\n      updateDatabaseTHEN_UI();\r\n    });\r\n\r\n\r\n\r\n  }\r\n});\r\n\r\n\r\n// console.log('getting to listening to al cards click2');\r\nnextBt.addEventListener('click', e => {\r\n  showPageTwo();\r\n\r\n});\r\nthreeBt.addEventListener('click', ee => {\r\n  //watch for cheating\r\n  if (ee.target.style.opacity < 0.5) { alertUserForSec(`You sneaky one...`, 0.5) }\r\n  // document.querySelector('#puzzleWrapper').remove();\r\n  // document.querySelector('#takeTimeReminder').style.opacity = \"0\";\r\n  document.querySelector('#threeButtons').style.backgroundColor = 'rgba(0, 0, 0, 0)';\r\n  document.querySelector('#saveChangesAlert').style.display = 'none';\r\n  // threeBt.style.display = 'none';\r\n\r\n  updateALL(ee);\r\n})\r\ndeleteCardHTML.addEventListener('click', e => { deleteCard(e); })\r\n\r\n// prevent scrolling on certain buttons\r\nnextBt.addEventListener('touchmove', e => { e.preventDefault(); });\r\nthreeBt.addEventListener('touchmove', e => { e.preventDefault(); });\r\n// secondWordHTML.addEventListener('touchmove', e => { e.preventDefault(); });\r\n\r\n//show and close windows (Help section and Add new word) on click\r\nfor (const sw of showWindowS) {\r\n  sw.addEventListener('click', eX => {\r\n    eX.target.parentElement.nextElementSibling.style.display = \"block\";\r\n    scroll(0, 0);\r\n    // console.log('selected element:', eX.target.parentElement.parentElement.id);\r\n    if (eX.target.parentElement.parentElement.id == \"addVocabulary\") {\r\n      // console.log('add voc clicked');\r\n      document.querySelector(\"#formNewWord_NativeInput\").focus();\r\n\r\n    };\r\n  });\r\n};\r\nfor (const bb of closeWindowS) {\r\n  bb.addEventListener('click', eee => {\r\n    // alertUserForSec(eee.target.parentElement.parentElement.id, 2);\r\n    if (eee.target.parentElement.classList.contains('pairedButton') && eee.target.parentElement.parentElement.id == 'formAdjustWord') {\r\n      eee.target.parentElement.parentElement.parentElement.style.display = \"none\";\r\n    } else {\r\n      eee.target.parentElement.style.display = \"none\";\r\n      // window.location.reload();\r\n    }\r\n    scroll(0, scrollAmount);\r\n  });\r\n};\r\n\r\n//listen to hints buttons clicks - reveal text and next buttons\r\nremindConnectButtonHTML.addEventListener('click', e => {\r\n  remindConnectTextHTML.classList.remove('hide');\r\n  setEvaluateButtonsOpacity(2, 2, 0.3, 0.3);\r\n});\r\nremindButtonHTML.addEventListener('click', e => {\r\n  remindTextHTML.classList.remove('hide');\r\n  remindConnectButtonHTML.classList.remove('hide');\r\n  setEvaluateButtonsOpacity(2, 2, 0.3, 0.3);\r\n});\r\n\r\n//listen to buttons after  4 evaluating buttons\r\n/// adjust button sorted in \"wordsOptions\" package as it needs functions from there\r\n// document.querySelector('#moveOnOption').addEventListener('click', e => {\r\n//   document.querySelector('#improveChallengeButtons').style.display = \"none\";\r\n//   updateDatabaseTHEN_UI();\r\n// })\r\n\r\n//listen to show letters button\r\nlet once = true;\r\ndocument.querySelector('#showLettersWrapper').addEventListener('click', e => {\r\n  letterPuzzle(wordTwo);\r\n  lettersBubblesActive = true;\r\n  setEvaluateButtonsOpacity(2, 2, 2, 0.3);\r\n  document.querySelector('#showLettersWrapper').style.display = 'none';\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n/////info about cards' PILES\r\n//adds cards info to HTML\r\n// let learnedCardsAvailableToChange = [];\r\n\r\nlet printCardsPileToHTML = (ID, cardsArray) => {\r\n\r\n  const newCardCountForHTML = document.createElement('div');\r\n  newCardCountForHTML.innerHTML = `${cardsArray.length} cards in this pile.`;\r\n  document.querySelector(`${ID} .showHideCards`).append(newCardCountForHTML);\r\n\r\n  cardsArray.forEach(card => {\r\n    let cardInfoNumbers = `${(new Date(card.lastSeen)).getDate()}/${(new Date(card.lastSeen)).getMonth() + 1} L.${card.level} `;\r\n    let cardInfoText = `${card.languageNative} `;\r\n\r\n    const newCardForHTML = document.createElement('div');\r\n    const newCardForHTMLc1 = document.createElement('span');\r\n    const newCardForHTMLc2 = document.createElement('span');\r\n\r\n    newCardForHTMLc1.innerHTML = cardInfoNumbers;\r\n    newCardForHTMLc2.innerHTML = cardInfoText;\r\n    newCardForHTMLc2.setAttribute(\"style\", \"color: black;\");\r\n\r\n    newCardForHTML.append(newCardForHTMLc1);\r\n    newCardForHTML.append(newCardForHTMLc2);\r\n\r\n    // if (ID === '#pileLearned') {\r\n    //   learnedCardsAvailableToChange = cardsArray;\r\n    //   newCardForHTMLc2.addEventListener('click', (e) => {\r\n    //     // console.log(e)\r\n    //     e.target.innerHTML = `${card.id}`;\r\n    //   })\r\n    // }\r\n\r\n    document.querySelector(`${ID} .showHideCards`).append(newCardForHTML);\r\n    document.querySelector(`${ID} button`).setAttribute(\"style\", \"display:none\");\r\n    // e.target.setAttribute(\"style\", \"display:none\");\r\n\r\n\r\n    // if card from learned pile...\r\n    if (ID === '#pileLearned') {\r\n\r\n      const buttonsWrapper = document.createElement('div');\r\n\r\n      const newSHOWButtonForHTML = document.createElement('button');\r\n      newSHOWButtonForHTML.innerHTML = \"Show translation\";\r\n      newSHOWButtonForHTML.setAttribute(\"id\", `TRANSLATION${card.DBid}`);\r\n      newSHOWButtonForHTML.setAttribute(\"class\", `spin-border-radius`);\r\n      // newCardForHTML.append(newSHOWButtonForHTML);\r\n      buttonsWrapper.append(newSHOWButtonForHTML);\r\n\r\n\r\n      const newButtonForHTML = document.createElement('button');\r\n      newButtonForHTML.innerHTML = \"Learn again\";\r\n      newButtonForHTML.setAttribute(\"id\", `${card.DBid}`);\r\n      // newCardForHTML.append(newButtonForHTML);\r\n      buttonsWrapper.append(newButtonForHTML);\r\n\r\n      newCardForHTML.append(buttonsWrapper);\r\n    }\r\n\r\n    if (ID === '#pileNotDue' || ID === \"#pileDue\") {\r\n\r\n\r\n      //show translation text\r\n      const newSpanForHTML = document.createElement('span');\r\n      let cardInfoTextTranslation = `${card.languageToLearn} `;\r\n      newSpanForHTML.innerHTML = cardInfoTextTranslation;\r\n      newSpanForHTML.setAttribute(\"style\", \"color: brown;\");\r\n      newCardForHTML.append(newSpanForHTML);\r\n\r\n      //add button for adjusting translations\r\n      const newButtonForHTMLTranslationAdjustment = document.createElement('button');\r\n      newButtonForHTMLTranslationAdjustment.innerHTML = \"Adjust\";\r\n      newButtonForHTMLTranslationAdjustment.setAttribute(\"id\", `ID${card.DBid}adjust`);\r\n      newCardForHTML.append(newButtonForHTMLTranslationAdjustment);\r\n\r\n      if (!card.translationChecked || card.translationChecked != true) {\r\n        //new line\r\n        const newLineForHTML = document.createElement('br');\r\n        newCardForHTML.append(newLineForHTML);\r\n\r\n        //add button for marking checked translations\r\n        const newButtonForHTMLTranslationCheck = document.createElement('button');\r\n        newButtonForHTMLTranslationCheck.innerHTML = \"Translation Ok\";\r\n        newButtonForHTMLTranslationCheck.setAttribute(\"id\", `ID${card.DBid}`);\r\n        newCardForHTML.append(newButtonForHTMLTranslationCheck);\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// get cards from DB\r\nlet getAndReturnDataAboutPile = async (pileNameInDB) => {\r\n  let cardsByLastSeenAr = [];\r\n  let cardsByLastSeen = await cards.collection(pileNameInDB).orderBy('lastSeen', \"desc\").get();\r\n  // cardsByLastSeen.docs.forEach(doc => cardsByLastSeenAr.push({doc.id, ...doc.data() }));\r\n  cardsByLastSeen.docs.forEach(doc => cardsByLastSeenAr.push({ DBid: doc.id, ...doc.data() }));\r\n  // console.log(cardsByLastSeenAr[0]);\r\n  return cardsByLastSeenAr;\r\n};\r\n\r\ndocument.querySelector('#pileLearned button').addEventListener(\"click\", async () => {\r\n  printCardsPileToHTML('#pileLearned', await getAndReturnDataAboutPile(\"cardsLearned\"));\r\n});\r\n////spec. for learned pile - listen to MOVE buttons\r\ndocument.querySelector('#pileLearned .showHideCards').addEventListener(\"click\", async (e) => {\r\n\r\n  if (e.target.tagName == 'BUTTON' && e.target.id) {\r\n    let dbKey = e.target.id;\r\n    if (e.target.id.slice(0, 11) === 'TRANSLATION') dbKey = e.target.id.slice(11, e.target.id.length);\r\n    let cardToMove = await cards.collection(\"cardsLearned\").doc(`${dbKey}`).get();\r\n    console.log(cardToMove);\r\n\r\n    cardToMove = cardToMove.data();\r\n\r\n    if (e.target.id.slice(0, 11) === 'TRANSLATION') {\r\n      console.log(\"BBBBBBBBBBBBBBBBBBBBBBBBBB BUTON translation\")\r\n\r\n      const translationForHTML = document.createElement('span');\r\n      translationForHTML.innerHTML = cardToMove.languageToLearn;\r\n      translationForHTML.setAttribute(\"style\", \"color: brown;\");\r\n      console.log(\"element to append:\", translationForHTML);\r\n      // e.target.append(translationForHTML);\r\n      e.target.insertAdjacentElement('afterend', translationForHTML);\r\n\r\n      const translationBrForHTML = document.createElement('br');\r\n      e.target.insertAdjacentElement('afterend', translationBrForHTML);\r\n    }\r\n    else {\r\n      console.log(\"BBBBBBBBBBBBBBBBBBBBBBBBBB BUTON move back\")\r\n\r\n    }\r\n    //   cardToMove.level = 5;\r\n    //   cards.collection(\"cardsLearningNotDue\").doc(e.target.id).set(cardToMove);\r\n    //   cards.collection(\"cardsLearned\").doc(e.target.id).delete();\r\n\r\n    //   const buttonReplacementForHTML = document.createElement('span');\r\n    //   buttonReplacementForHTML.innerHTML = \"  Element moved to current pile.\";\r\n    //   e.target.insertAdjacentElement('afterend', buttonReplacementForHTML);\r\n    //   e.target.remove();\r\n    // }\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\n////spec. for 2 learning piles - listen to CHECK TRANSLATION buttons\r\ndocument.querySelector('#pileNotDue .showHideCards').addEventListener(\"click\", async (e) => {\r\n  if (e.target.tagName == 'BUTTON' && e.target.id) {\r\n    let idHelp = e.target.id;\r\n    idHelp = idHelp.substring(2);  // remove letters 'ID' from the beginning\r\n    let ending = idHelp.slice(-6); // returns last 6 letters from the string\r\n    if (ending != \"adjust\") { // button \"Translate ok\" clicked; button which has id withOUT DB doc id extended with \"adjust\" text on the end\r\n\r\n      // let cardToAdjust = await cards.collection(\"cardsLearningNotDue\").doc(`${idHelp}`).get();\r\n      // cardToAdjust = cardToAdjust.data();\r\n      // // cardToAdjust.level = 5;\r\n      // cardToAdjust.translationChecked = true;\r\n      // cards.collection(\"cardsLearningNotDue\").doc(idHelp).set(cardToAdjust);\r\n\r\n      await cards.collection(\"cardsLearningNotDue\").doc(`${idHelp}`).update({ translationChecked: true });\r\n\r\n      // cards.collection(\"cardsLearned\").doc(e.target.id).delete();\r\n\r\n      const buttonReplacementForHTML = document.createElement('span');\r\n      buttonReplacementForHTML.innerHTML = \"Card marked as checked.\";\r\n      e.target.insertAdjacentElement('afterend', buttonReplacementForHTML);\r\n      e.target.remove();\r\n    }\r\n\r\n\r\n    else {\r\n      //button \"adjust was clicked\"; button which has html id with 'DB doc id extended with \"adjust\" text on the end'\r\n      let hideInfoPiles = document.querySelector('#pilesInfo .invisibleWindow');\r\n      hideInfoPiles.style.display = \"none\";\r\n      scroll(0, scrollAmount);\r\n\r\n      console.log(\"XXXXXXXXXYYYYYYbutton adjust was clicked\");\r\n\r\n\r\n      let changeWordsHTML = document.querySelector('#changeWords');\r\n      let changeWordsHTMLf = changeWordsHTML.querySelector('.optionsWindow');\r\n\r\n      scroll(0, 0);\r\n      // adjustCurrentWord();\r\n      // console.log(currentCardInOp, currentCardInOpID);\r\n      // console.log(changeWordsHTMLf);\r\n      let DbID = idHelp.slice(0, idHelp.length - 6); //removing \"adjust\" text from the HTML ID to get doc from DB\r\n\r\n      let cardToAdjust = await cards.collection(\"cardsLearningNotDue\").doc(`${DbID}`).get();\r\n      cardToAdjust = cardToAdjust.data();\r\n\r\n      currentCard = cardToAdjust;\r\n      currentCardID = DbID;\r\n\r\n      let nativeWord = document.querySelector('#nativeWToAdjust');\r\n      let toLearnWord = document.querySelector('#wToLearnAdjust');\r\n      let connectionHTML = document.querySelector('#connectionInput');\r\n      let cReminderAHTML = document.querySelector('#remindConnectionA');\r\n      let cReminderBHTML = document.querySelector('#remindConnectionB');\r\n\r\n      // show current values of the card:\r\n      nativeWord.setAttribute('value', currentCard.languageNative);\r\n      toLearnWord.setAttribute('value', currentCard.languageToLearn);\r\n      if (currentCard.connection != undefined) {\r\n        connectionHTML.setAttribute('value', currentCard.connection);\r\n      } else { connectionHTML.setAttribute('value', ''); }\r\n      if (currentCard.cReminderNativeShown != undefined) {\r\n        cReminderAHTML.setAttribute('value', currentCard.cReminderNativeShown);\r\n      } else { cReminderAHTML.setAttribute('value', ''); }\r\n      if (currentCard.cReminderToLearnShown != undefined) {\r\n        cReminderBHTML.setAttribute('value', currentCard.cReminderToLearnShown);\r\n      } else { cReminderBHTML.setAttribute('value', ''); }\r\n\r\n      // console.log(nativeWord, toLearnWord);\r\n      Object(_wordsOptions__WEBPACK_IMPORTED_MODULE_1__[\"refreshOptions\"])(currentCard, currentCardID, userInfo);\r\n      showPageTwo();\r\n      changeWordsHTMLf.style.display = 'block';\r\n      console.log(\"XXXXXXXXXYYYYYYbutton adjust was clicked - block should be shown\");\r\n      updateThisHTMLIdAfterUpdate = \"ID\" + DbID;\r\n    }\r\n  }\r\n});\r\ndocument.querySelector('#pileDue .showHideCards').addEventListener(\"click\", async (e) => {\r\n  if (e.target.tagName == 'BUTTON' && e.target.id) {\r\n    let idHelp = e.target.id;\r\n    idHelp = idHelp.substring(2);  // remove letters 'ID' from the beginning\r\n    let ending = idHelp.slice(-6); // returns last 6 letters from the string\r\n    if (ending != \"adjust\") { // button \"Translate ok\" clicked; button which has id withOUT DB doc id extended with \"adjust\" text on the end\r\n      await cards.collection(\"cardsLearningDue\").doc(`${idHelp}`).update({ translationChecked: true });\r\n      //update info about \"doc\" in html pile\r\n      const buttonReplacementForHTML = document.createElement('span');\r\n      buttonReplacementForHTML.innerHTML = \"Card marked as checked.\";\r\n      e.target.insertAdjacentElement('afterend', buttonReplacementForHTML);\r\n      e.target.remove();\r\n    }\r\n    else {\r\n      //button \"adjust was clicked\"; button which has html id with 'DB doc id extended with \"adjust\" text on the end'\r\n      let hideInfoPiles = document.querySelector('#pilesInfo .invisibleWindow');\r\n      hideInfoPiles.style.display = \"none\"; //to hide first page of the app and jump to 'update word' section, i think\r\n      // scroll(0, scrollAmount);\r\n      // console.log(\"XXXXXXXXXYYYYYYbutton adjust was clicked\");\r\n      let changeWordsHTML = document.querySelector('#changeWords');\r\n      let changeWordsHTMLf = changeWordsHTML.querySelector('.optionsWindow');\r\n      scroll(0, 0);\r\n      let DbID = idHelp.slice(0, idHelp.length - 6); //removing \"adjust\" text from the HTML ID to get doc from DB\r\n      let cardToAdjust = await cards.collection(\"cardsLearningDue\").doc(`${DbID}`).get();\r\n      cardToAdjust = cardToAdjust.data();\r\n      currentCard = cardToAdjust;\r\n      currentCardID = DbID;\r\n      let nativeWord = document.querySelector('#nativeWToAdjust');\r\n      let toLearnWord = document.querySelector('#wToLearnAdjust');\r\n      let connectionHTML = document.querySelector('#connectionInput');\r\n      let cReminderAHTML = document.querySelector('#remindConnectionA');\r\n      let cReminderBHTML = document.querySelector('#remindConnectionB');\r\n      // show current values of the card:\r\n      nativeWord.setAttribute('value', currentCard.languageNative);\r\n      toLearnWord.setAttribute('value', currentCard.languageToLearn);\r\n      if (currentCard.connection != undefined) {\r\n        connectionHTML.setAttribute('value', currentCard.connection);\r\n      } else { connectionHTML.setAttribute('value', ''); }\r\n      if (currentCard.cReminderNativeShown != undefined) {\r\n        cReminderAHTML.setAttribute('value', currentCard.cReminderNativeShown);\r\n      } else { cReminderAHTML.setAttribute('value', ''); }\r\n      if (currentCard.cReminderToLearnShown != undefined) {\r\n        cReminderBHTML.setAttribute('value', currentCard.cReminderToLearnShown);\r\n      } else { cReminderBHTML.setAttribute('value', ''); }\r\n\r\n      // console.log(nativeWord, toLearnWord);\r\n      Object(_wordsOptions__WEBPACK_IMPORTED_MODULE_1__[\"refreshOptions\"])(currentCard, currentCardID, userInfo);\r\n      showPageTwo();\r\n      changeWordsHTMLf.style.display = 'block';\r\n      console.log(\"XXXXXXXXXYYYYYYbutton adjust was clicked - block should be shown\");\r\n      updateThisHTMLIdAfterUpdate = \"ID\" + DbID;\r\n\r\n\r\n      e.target.parentElement.remove(); //remove card from html Due pile (as it is in not due pile now)\r\n      updateThisHTMLIdAfterUpdate = null; //has to be null to prevent updating html element which is not there\r\n    }\r\n  }\r\n});\r\n\r\ndocument.querySelector('#pileDue button').addEventListener(\"click\", async () => {\r\n  printCardsPileToHTML('#pileDue', await getAndReturnDataAboutPile(\"cardsLearningDue\"));\r\n});\r\ndocument.querySelector('#pileNotDue button').addEventListener(\"click\", async () => {\r\n  printCardsPileToHTML('#pileNotDue', await getAndReturnDataAboutPile(\"cardsLearningNotDue\"));\r\n});\r\n\r\ndocument.querySelector('#pileToLearnNext button').addEventListener(\"click\", async () => {\r\n  printCardsPileToHTML('#pileToLearnNext', await getAndReturnDataAboutPile(\"cardsToLearnNext\"));\r\n});\r\n\r\ndocument.querySelector('#pileToLearn button').addEventListener(\"click\", async () => {\r\n  printCardsPileToHTML('#pileToLearn', await getAndReturnDataAboutPile(\"cardsToLearn\"));\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\nObject(_stopwatchPoints__WEBPACK_IMPORTED_MODULE_0__[\"resetAppIfReturnedAfterXseconds\"])(120);\r\n\r\n\r\n// console.log('getting to listening to al cards click3');\r\n// showAllCardsHTML.addEventListener('click', e => showALLCards);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// time tracking idle counter?\r\nwindow.addEventListener('click', e => {\r\n  // console.log('you CLICKED-I will reset idle time.');\r\n  Object(_stopwatchPoints__WEBPACK_IMPORTED_MODULE_0__[\"resetIdleTime\"])();\r\n});\r\n\r\n// hiding score\r\nlet scrollAmount = 430;\r\nlet offsetTop = document.querySelector('#mainTitle').offsetTop;\r\n// scrollAmount = offsetTop;\r\nscroll(0, scrollAmount);  // to hide scores on the beginning\r\n// ho hide score when title clicked\r\nmainTitleHTML.addEventListener('click', e => { scroll(0, scrollAmount) });\r\n\r\n_wordsOptions__WEBPACK_IMPORTED_MODULE_1__[\"activateWordsOptions\"].js;\r\nObject(_wordsOptions__WEBPACK_IMPORTED_MODULE_1__[\"activateWordsOptions\"])();\r\n\r\n\r\n// //////// center button - text reminder\r\n// alertUserForSec('Congrats - you learned this card.', 2);\r\n\r\n\r\n\r\nwindow.addEventListener('scroll', function (e) {\r\n\r\n  // console.log('CurentCard in bundle.js on scroll CCCCCCCCCCCCCCCCCC', currentCard);\r\n\r\n\r\n  //sort + button\r\n  // let yOffset = window.pageYOffset - scrollAmount;\r\n  let yOffset = window.pageYOffset - offsetTop;\r\n  let bodyWidth = document.querySelector('body').offsetWidth;\r\n  let containerWidth = document.querySelector('#container').offsetWidth;\r\n  if (yOffset > -75) {\r\n    document.querySelector('#addVocabulary .visibleIcon').style.position = 'fixed';\r\n    let movePlusToLeft = 0;\r\n    document.querySelector('#addVocabulary .visibleIcon').style.top = '0';\r\n    document.querySelector('#addVocabulary .visibleIcon').style.opacity = '0.3';\r\n    if (bodyWidth > containerWidth) { movePlusToLeft = (bodyWidth - 500) / 2; }\r\n    document.querySelector('#addVocabulary .visibleIcon').style.right = `${movePlusToLeft}px`;\r\n  } else {\r\n    document.querySelector('#addVocabulary .visibleIcon').style.position = 'absolute';\r\n    document.querySelector('#addVocabulary .visibleIcon').style.right = '0';\r\n    document.querySelector('#addVocabulary .visibleIcon').style.top = '0';\r\n    document.querySelector('#addVocabulary .visibleIcon').style.opacity = '1';\r\n  }\r\n\r\n  //title opacity\r\n  if (yOffset > -35) { document.querySelector('#mainTitle').style.opacity = '0'; }\r\n  else { document.querySelector('#mainTitle').style.opacity = '1'; }\r\n\r\n  // tapToCenter button opacity\r\n  // let centerOffset = Math.abs(window.pageYOffset - scrollAmount);\r\n  let centerOffset = Math.abs(window.pageYOffset - offsetTop);\r\n  let centerButtonOpacityMiro = 0;\r\n  if (centerOffset > 75) {\r\n    centerButtonOpacityMiro = 0 + (centerOffset - 25) / 200;\r\n    if (centerButtonOpacityMiro > 1) { centerButtonOpacityMiro = 1 };\r\n  } else { centerButtonOpacityMiro = 0 };\r\n  document.querySelector('#tapToCenter').style.opacity = centerButtonOpacityMiro;\r\n\r\n  // console.log('OOOOOOOOOOOOOOOOOOOOOOOOOOOO offset ', centerOffset);\r\n  // console.log('OOOOOOOOOOOOOOOOOOOOOOOOOOOO ', centerButtonOpacityMiro);\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/js/bundle.js?");

/***/ }),

/***/ "./src/js/stopwatchPoints.js":
/*!***********************************!*\
  !*** ./src/js/stopwatchPoints.js ***!
  \***********************************/
/*! exports provided: stopwatchPointsInit, updatePoints, stopWatchInit, resetIdleTime, resetAppIfReturnedAfterXseconds, countCards, daysSince1970Floored */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stopwatchPointsInit\", function() { return stopwatchPointsInit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updatePoints\", function() { return updatePoints; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stopWatchInit\", function() { return stopWatchInit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resetIdleTime\", function() { return resetIdleTime; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resetAppIfReturnedAfterXseconds\", function() { return resetAppIfReturnedAfterXseconds; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"countCards\", function() { return countCards; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"daysSince1970Floored\", function() { return daysSince1970Floored; });\n// import { cards, userID } from './bundle';\r\n\r\nlet d = new Date();\r\nlet dayToday = d.getDate(); //day as a number (1-31)\r\nlet month = d.getMonth() + 1;  //month as a number (0-11)\r\nlet year = d.getFullYear(); //year as a four digit number (yyyy)\r\n// console.log('date today:', dayToday);\r\n// console.log('month: ', month + 1, ' year: ', year);\r\n\r\n// console.log(d);\r\nlet timeNow = d.getTime();\r\n// console.log(timeNow);\r\nlet days = timeNow / 1000 / 60 / 60 / 24;\r\n// console.log(days);\r\nlet daysSince1970Floored = Math.floor(days);\r\n// console.log(daysSince1970Floored);\r\n\r\n\r\nlet pointsSHTML = document.querySelector('#pointsCounterS');\r\nlet pointsTHTML = document.querySelector('#pointsCounterT');\r\nlet history7HTML = document.querySelector('#history7days');\r\n\r\nlet timeSHTML = document.querySelector('#timeCounterS');\r\nlet timeTHTML = document.querySelector('#timeCounterT');\r\nlet timeHistory7HTML = document.querySelector('#timeHistory7days');\r\n\r\nlet idleTime = 0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// returns current points and time from DB also\r\nlet createUserVariablesInFBifNeeded = async (cards) => {\r\n  // let updatingPoints = null;\r\n  // let updatingPointsHistory = null;\r\n  // let updatingDayToday = null;\r\n  let points = await cards.collection(\"about\").doc(\"points\").get();\r\n  points = points.data();\r\n\r\n  let time = await cards.collection(\"about\").doc(\"time\").get();\r\n  time = time.data();\r\n\r\n  // console.log(points, 'ppppppppppppppppppppppppppppppppp');\r\n  // console.log('check new variables XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');\r\n\r\n  if (points == undefined || time == undefined) {\r\n    let updatingPoints = cards.collection(\"about\").doc(\"points\").set({\r\n      session: 0,\r\n      today: 0,\r\n      daysActive: 1,\r\n      lastActiveDay: daysSince1970Floored\r\n    });\r\n    let updatingPointsHistory = cards.collection(\"about\").doc(\"pointsHistory\").set({\r\n      // empty document - ready to be used\r\n    });\r\n    let updateUserInfo = cards.collection(\"about\").doc(\"info\").update({\r\n      startDate: d\r\n    });\r\n\r\n    let updatingTime = cards.collection(\"about\").doc(\"time\").set({\r\n      session: 0,\r\n      today: 0,\r\n    });\r\n    let updatingTimeHistory = cards.collection(\"about\").doc(\"timeHistory\").set({\r\n      // empty document - ready to be used\r\n    });\r\n\r\n    // updatingDayToday = cards.collection(\"about\").doc(\"dayToday\").set({\r\n    //   day: dayToday\r\n    // });\r\n\r\n    await Promise.all([updatingPoints, updatingPointsHistory, updateUserInfo, updatingTime, updatingTimeHistory]);\r\n    points = await cards.collection(\"about\").doc(\"points\").get();\r\n    points = points.data();\r\n\r\n    time = await cards.collection(\"about\").doc(\"time\").get();\r\n    time = time.data();\r\n    console.log('POINTS and TIME created in DB XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');\r\n    // console.log(points);\r\n    // console.log(time);\r\n\r\n  }\r\n  // console.log('POINTS AND TIME IN DB:');\r\n  // console.log(points);\r\n  // console.log(time);\r\n\r\n  return [points, time];\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// returns updated points\r\nlet updateDayStuffIfNeeded = async (cards, points, time) => {\r\n  points.session = 0;\r\n  time.session = 0;\r\n\r\n\r\n  // if new day...\r\n  while (daysSince1970Floored > points.lastActiveDay) {\r\n    console.log('DAYS ARE DIFFERENT, time to update variables...XXXXXXXXXXXXXXXXXXXXXXX');\r\n    // console.log(daysSince1970Floored); //days to current day\r\n    // console.log(points.daysActive); //last Active day = in DB points\r\n\r\n    // get  HISTORY docs\r\n    let pointsHistory = cards.collection(\"about\").doc(\"pointsHistory\").get();\r\n    let timeHistory = cards.collection(\"about\").doc(\"timeHistory\").get();\r\n    pointsHistory = await pointsHistory;\r\n    timeHistory = await timeHistory;\r\n    pointsHistory = pointsHistory.data();\r\n    timeHistory = timeHistory.data();\r\n\r\n    console.log('ttttttttttttttttttttttttttttttttttttttttttttttttttttttt');\r\n    console.log('pointsH:', pointsHistory, 'timesH:', timeHistory);\r\n\r\n\r\n    // update history doc locally, then in DB\r\n    pointsHistory[points.daysActive] = points.today;\r\n    timeHistory[points.daysActive] = time.today;\r\n    // console.log('P XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');\r\n    let aa = cards.collection(\"about\").doc(\"pointsHistory\").set(pointsHistory);\r\n    let bb = cards.collection(\"about\").doc(\"timeHistory\").set(timeHistory);\r\n    await aa; await bb;\r\n    console.log('history of both updated in DB');\r\n\r\n    // console.log(pointsHistory);\r\n    // update timeHistory and time\r\n\r\n    // add 1 day to user's \"last day\" (and keep repeating until you reach today)\r\n    points.lastActiveDay++;\r\n    points.daysActive++;\r\n\r\n    points.today = 0;\r\n    time.today = 0;\r\n\r\n    // updating current points and times in DB\r\n    let cc = cards.collection(\"about\").doc(\"points\").update(points);\r\n    let dd = cards.collection(\"about\").doc(\"time\").update(time);\r\n    await cc; await dd;\r\n  }\r\n  let cc = cards.collection(\"about\").doc(\"points\").update(points);\r\n  let dd = cards.collection(\"about\").doc(\"time\").update(time);\r\n  await cc; await dd;\r\n\r\n\r\n  return [points, time];\r\n}\r\n\r\n\r\n\r\n\r\nlet showPointsInHtml = (points) => {\r\n  pointsSHTML.innerHTML = `<p>${points.session}</p>`;\r\n  pointsTHTML.innerHTML = `<p>${points.today}</p>`;\r\n}\r\n\r\nlet showTimeInHTML = (time) => {\r\n  timeSHTML.innerHTML = `<p>${time.session}</p>`;\r\n  timeTHTML.innerHTML = `<p>${time.today}</p>`;\r\n  // timeHistoryHTML = as separate function-  only once a day and during reload\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet showHistory = async (cardsPath, points, time) => {\r\n  // get  HISTORY doc\r\n\r\n  let pointsHistory = cardsPath.collection(\"about\").doc(\"pointsHistory\").get();\r\n  let timeHistory = cardsPath.collection(\"about\").doc(\"timeHistory\").get();\r\n  pointsHistory = await pointsHistory;\r\n  timeHistory = await timeHistory;\r\n  pointsHistory = pointsHistory.data();\r\n  timeHistory = timeHistory.data();\r\n  // console.log('points history: ', pointsHistory);\r\n  // console.log('time history: ', timeHistory);\r\n\r\n\r\n  let counter = 1;\r\n  let lastDayInHistory = points.daysActive - 1;\r\n  let lastWantedDayInHistory = points.daysActive - 1;\r\n  // let history7Array = [];\r\n  // let timeHistory7Array = [];\r\n\r\n  history7HTML.innerHTML = '<strong>Points: </strong> ';\r\n  timeHistory7HTML.innerHTML = '<strong>Minutes: </strong> ';\r\n\r\n  // console.log('scores in history HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH');\r\n  while (counter < 8 && counter <= lastDayInHistory) {\r\n    // history7Array.push(pointsHistory[lastWantedDayInHistory]);\r\n    // timeHistory7Array.push(timeHistory[lastWantedDayInHistory]);\r\n    // console.log(lastWantedDayInHistory, ' : ', pointsHistory[lastWantedDayInHistory]);\r\n    history7HTML.innerHTML += `<span>${pointsHistory[lastWantedDayInHistory]} </span>`\r\n    timeHistory7HTML.innerHTML += `<span>${timeHistory[lastWantedDayInHistory]}</span>`\r\n\r\n    // console.log(\"counter: \", counter);\r\n    // if (counter == 8 || counter == lastDayInHistory) {\r\n    //   history7HTML.innerHTML += `<span> </span>`;\r\n    //   timeHistory7HTML.innerHTML += `<span>m. </span>`;\r\n\r\n    // } else {\r\n    //   history7HTML.innerHTML += `<span> - </span>`;\r\n    //   timeHistory7HTML.innerHTML += `<span>m. - </span>`;\r\n    // }\r\n\r\n    counter++;\r\n    lastWantedDayInHistory--;\r\n  }\r\n  // console.log('Starting with the most recent day: ', history7Array);\r\n  // console.log(history7Array.length);\r\n\r\n  // history7Array.forEach(day => {  //starts with the left = most recent day first\r\n  //   // console.log(day, ', ');\r\n  //   history7HTML.innerHTML += `<span>${day}, </span>`\r\n  // })\r\n  // history7HTML.innerHTML += `<span>...</span>`\r\n\r\n}\r\n\r\n\r\n// let showHistory = async (cardsPath, points) => {\r\n//   // get  HISTORY doc\r\n//   let pointsHistory = await cardsPath.collection(\"about\").doc(\"pointsHistory\").get();\r\n//   pointsHistory = pointsHistory.data();\r\n\r\n//   let counter = 1;\r\n//   let lastDayInHistory = points.daysActive - 1;\r\n//   let lastWantedDayInHistory = points.daysActive - 1;\r\n//   let history7Array = [];\r\n//   history7HTML.innerHTML = '<strong>Last 7 days: </strong> ';\r\n\r\n//   // console.log('scores in history HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH');\r\n//   while (counter < 8 && counter <= lastDayInHistory) {\r\n//     history7Array.push(pointsHistory[lastWantedDayInHistory])\r\n//     // console.log(lastWantedDayInHistory, ' : ', pointsHistory[lastWantedDayInHistory]);\r\n//     history7HTML.innerHTML += `<span>${pointsHistory[lastWantedDayInHistory]} </span>`\r\n\r\n\r\n//     // console.log(\"counter: \", counter);\r\n//     if (counter == 8 || counter == lastDayInHistory) {\r\n//       history7HTML.innerHTML += `<span> </span>`;\r\n//     } else {\r\n//       history7HTML.innerHTML += `<span> - </span>`;\r\n//     }\r\n\r\n//     counter++;\r\n//     lastWantedDayInHistory--;\r\n//   }\r\n//   // console.log('Starting with the most recent day: ', history7Array);\r\n//   // console.log(history7Array.length);\r\n\r\n//   // history7Array.forEach(day => {  //starts with the left = most recent day first\r\n//   //   // console.log(day, ', ');\r\n//   //   history7HTML.innerHTML += `<span>${day}, </span>`\r\n//   // })\r\n//   // history7HTML.innerHTML += `<span>...</span>`\r\n\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet startTimeTrack = (time, cardsPath) => {\r\n  idleTime = 0;\r\n  let timePracticedInSeconds = 0;\r\n\r\n  setInterval(() => {  //each second\r\n    idleTime++;\r\n    timePracticedInSeconds++;\r\n    // console.log(idleTime);\r\n    // console.log(timePracticedInSeconds);\r\n\r\n    // keep time practices \"paused\" until user became active again (by +-1 keeping the seconds the same)\r\n    if (idleTime > 60) { timePracticedInSeconds--; }\r\n\r\n    if (timePracticedInSeconds >= 60) { //needs to be 60 to make 1 minute\r\n      time.session++;\r\n      time.today++;\r\n      cardsPath.collection(\"about\").doc(\"time\").update(time);\r\n      showTimeInHTML(time);\r\n      timePracticedInSeconds = 0;\r\n    }\r\n  }, 1000)\r\n}\r\n\r\n// called upon any click in practice section\r\nlet resetIdleTime = () => {\r\n  idleTime = 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet stopwatchPointsInit = async (cardsPath) => {\r\n  // let points = await createUserVariablesInFBifNeeded(cardsPath);\r\n  let array = await createUserVariablesInFBifNeeded(cardsPath);\r\n  let points = array[0];\r\n  let time = array[1];\r\n  // console.log('after CHECKING  USER OBJECTS, getting points and time from DB and returning array and converting array to points and time:');\r\n  // console.log(points, time);\r\n\r\n  // UPDATE NEW DAY if needed, update new Session points and time in DB and locally, return current points and time from DB\r\n  let array2 = await updateDayStuffIfNeeded(cardsPath, points, time);\r\n  points = array2[0];\r\n  time = array2[1];\r\n  // console.log('after UPDATING Session (+DAY) and returning array and converting array to points and time:');\r\n  // console.log(points, time);\r\n\r\n  showTimeInHTML(time);\r\n  showPointsInHtml(points);\r\n  showHistory(cardsPath, points, time);\r\n  startTimeTrack(time, cardsPath);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return points;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet updatePoints = async (score, points, cardsPath) => {\r\n  points.session += score;\r\n  points.today += score;\r\n  // console.log('points to upoad to DB  qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq');\r\n  // console.log(points);\r\n  await cardsPath.collection(\"about\").doc(\"points\").update(points);\r\n  showPointsInHtml(points);\r\n  return points;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// let createTimeVariablesInDBIfNeeded = async (cardsPath) => {\r\n//   let time = await cardsPath.collection(\"about\").doc(\"time\").get();\r\n//   time = time.data();\r\n\r\n//   if (points == undefined) {\r\n//     let updatingTime = cards.collection(\"about\").doc(\"time\").set({\r\n//       session: 0,\r\n//       today: 0,\r\n//     });\r\n//     let updatingTimeHistory = cards.collection(\"about\").doc(\"timeHistory\").set({\r\n//       // empty document - ready to be used\r\n//     });\r\n//   }\r\n// }\r\n\r\nlet stopWatchInit = async (cardsPath) => {\r\n  // let timeTracker = await createTimeVariablesInDBIfNeeded(cardsPath);\r\n  console.log('stop watch init');\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ///////count cards\r\nlet countCards = (cardsPath) => {\r\n  console.log('COUNTING CARDS    -----------------------------------------');\r\n  let totalAmountOfCards = 0;\r\n  cardsPath.collection(\"cardsToLearn\").get().then((data) => {\r\n    // console.log(\"to learn: \", data.docs.length, ' cards');\r\n    data.docs.forEach(doc => {\r\n      // console.log(doc.data());\r\n    })\r\n    totalAmountOfCards += data.docs.length;\r\n    // console.log('Total: ', totalAmountOfCards);\r\n  });\r\n  cardsPath.collection(\"cardsLearningNotDue\").get().then((data) => {\r\n    console.log(\"not due/waiting: \", data.docs.length, ' cards');\r\n    data.docs.forEach(doc => {\r\n      console.log(doc.data());\r\n    })\r\n    totalAmountOfCards += data.docs.length;\r\n    // console.log('Totals: ', totalAmountOfCards);\r\n  });\r\n  cardsPath.collection(\"cardsLearningDue\").get().then((data) => {\r\n    console.log(\"due: \", data.docs.length, ' cards');\r\n    data.docs.forEach(doc => {\r\n      console.log(doc.data());\r\n    })\r\n    totalAmountOfCards += data.docs.length;\r\n    // console.log('Total: ', totalAmountOfCards);\r\n  });\r\n  cardsPath.collection(\"cardsLearned\").get().then((data) => {\r\n    // console.log(\"learned: \", data.docs.length, ' cards');\r\n    // data.docs.forEach(doc => {\r\n    //   console.log(doc.data());\r\n    // })\r\n    totalAmountOfCards += data.docs.length;\r\n    console.log('TOTAL: ', totalAmountOfCards);\r\n  });\r\n}\r\n\r\n\r\n\r\nlet resetAppIfReturnedAfterXseconds = (seconds) => {\r\n  // refresh page when returned from other tab/app\r\n  let VisibilityTimeOn = 0;\r\n  let VisibilityTimeOff = 0;\r\n\r\n  document.addEventListener(\"visibilitychange\", function () {\r\n    if (document.visibilityState === 'visible') {\r\n      VisibilityTimeOn = new Date().getTime() / 1000;\r\n      console.log('Visibility on (in s): ', VisibilityTimeOn);\r\n\r\n      if ((VisibilityTimeOn - VisibilityTimeOff) > seconds) {\r\n        // console.log('I will reset  the app now.');\r\n        window.location.reload();\r\n        // window.location.href = window.location.href;\r\n      };\r\n    };\r\n    if (document.visibilityState === 'hidden') {\r\n      VisibilityTimeOff = new Date().getTime() / 1000;\r\n      console.log('Visibility off (in s): ', VisibilityTimeOff);\r\n    };\r\n  });\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/js/stopwatchPoints.js?");

/***/ }),

/***/ "./src/js/wordsOptions.js":
/*!********************************!*\
  !*** ./src/js/wordsOptions.js ***!
  \********************************/
/*! exports provided: activateWordsOptions, showOptions, hideOptions, refreshOptions, activateUserInOptions, getPosponeTime */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"activateWordsOptions\", function() { return activateWordsOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showOptions\", function() { return showOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hideOptions\", function() { return hideOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"refreshOptions\", function() { return refreshOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"activateUserInOptions\", function() { return activateUserInOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPosponeTime\", function() { return getPosponeTime; });\n/* harmony import */ var _bundle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bundle */ \"./src/js/bundle.js\");\n\r\n\r\n// alertUserForSec('ahoj', 2);\r\nlet optionsHTML = document.querySelector('#options');\r\nlet adjustedCardToReturn = undefined;\r\n\r\n// GOOGLE DEF.\r\nlet defGoogleHTML = document.querySelector('#definitionGoogle');\r\nlet defGoogleHTMLi = document.querySelectorAll('#definitionGoogle .optionsIcon')[0];\r\nlet defGoogleHTMLf = defGoogleHTML.querySelector('.optionsWindow');\r\nlet closeGoogleF = document.querySelectorAll('#definitionGoogle .closeButton')[0];\r\n// console.log('QUERY SELECTOR ALL:');\r\n// console.log(closeGoogleF);\r\n\r\nlet sentenceExamplesHTML = document.querySelector('#sentenceExamples');\r\n// let sentenceExamplesHTMLb = sentenceExamplesHTML.querySelector('.optionsIcon');\r\nlet alternativeTranslationsHTML = document.querySelector('#alternativeTranslations');\r\n// let alternativeTranslationsHTMLb = alternativeTranslationsHTML.querySelector('.optionsIcon');\r\nlet changeWordsHTML = document.querySelector('#changeWords');\r\nlet changeWordsHTMLf = changeWordsHTML.querySelector('.optionsWindow');\r\nlet currentCardInOp = null;\r\nlet currentCardInOpID = null;\r\nlet userInOp = null;\r\nlet cardsIoOp = null;\r\n\r\nlet posponeAdjusted = 0;\r\n\r\nlet speakWordHTML = document.querySelector('#speakWord');\r\n// let speakWordHTMLb = speakWordHTML.querySelector('.optionsIcon');\r\n// optionsHTML.innerHTML = 'changed';\r\n\r\n\r\n\r\n\r\nlet activateWordsOptions = () => {\r\n\r\n  let optionsActions = e => {\r\n    // console.log(e.target.parentElement.id);\r\n    // let buttonID = e.target.parentElement.id;\r\n    let buttonParent = e.target.parentElement;\r\n    // console.log(buttonID);\r\n    // console.log(buttonParent);\r\n    // console.log(defGoogleHTML);\r\n    // console.log(e.target.className);\r\n\r\n    if (buttonParent == defGoogleHTML && e.target.className === 'optionsIcon') {\r\n      console.log('google def action');\r\n      // defGoogleHTMLf.style.display = 'block';\r\n      // defGoogleHTMLf.style.display = 'none';\r\n      // closeGoogleF.onclick = () => {\r\n      //   console.log('you clicked CLOSE button');\r\n      //   defGoogleHTMLf.style.display = 'none';\r\n      // }\r\n    }\r\n\r\n\r\n    //changing the word/phrase\r\n    if ((buttonParent == changeWordsHTML && e.target.className === 'optionsIcon') || (e.target.id == 'adjustOption')) {\r\n      console.log('change word action fired');\r\n      scroll(0, 0);\r\n      // adjustCurrentWord();\r\n      // console.log(currentCardInOp, currentCardInOpID);\r\n      console.log(changeWordsHTMLf);\r\n      let nativeWord = document.querySelector('#nativeWToAdjust');\r\n      let toLearnWord = document.querySelector('#wToLearnAdjust');\r\n      let connectionHTML = document.querySelector('#connectionInput');\r\n      let cReminderAHTML = document.querySelector('#remindConnectionA');\r\n      let cReminderBHTML = document.querySelector('#remindConnectionB');\r\n\r\n      // show current values of the card:\r\n      nativeWord.setAttribute('value', currentCardInOp.languageNative);\r\n      toLearnWord.setAttribute('value', currentCardInOp.languageToLearn);\r\n      if (currentCardInOp.connection != undefined) {\r\n        connectionHTML.setAttribute('value', currentCardInOp.connection);\r\n      } else { connectionHTML.setAttribute('value', ''); }\r\n      if (currentCardInOp.cReminderNativeShown != undefined) {\r\n        cReminderAHTML.setAttribute('value', currentCardInOp.cReminderNativeShown);\r\n      } else { cReminderAHTML.setAttribute('value', ''); }\r\n      if (currentCardInOp.cReminderToLearnShown != undefined) {\r\n        cReminderBHTML.setAttribute('value', currentCardInOp.cReminderToLearnShown);\r\n      } else { cReminderBHTML.setAttribute('value', ''); }\r\n\r\n      // console.log(nativeWord, toLearnWord);\r\n      changeWordsHTMLf.style.display = 'block';\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    if (buttonParent == speakWordHTML && e.target.className === 'optionsIcon') {\r\n      let responsiveVoiceLanguage = '';\r\n      console.log('SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS');\r\n      console.log(userInOp.langToLearn);\r\n      if (userInOp.langToLearn === 'czech') { responsiveVoiceLanguage = 'Czech Female'; }\r\n      else if (userInOp.langToLearn === 'english') { responsiveVoiceLanguage = 'UK English Female'; }\r\n      else if (userInOp.langToLearn === 'french') { responsiveVoiceLanguage = 'French Female'; }\r\n      else if (userInOp.langToLearn === 'german') { responsiveVoiceLanguage = 'Deutsch Female'; }\r\n\r\n      let speak = async () => {\r\n        await responsiveVoice.speak(currentCardInOp.languageToLearn, responsiveVoiceLanguage);\r\n      }\r\n\r\n      speak();\r\n\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  optionsHTML.addEventListener('click', optionsActions);\r\n\r\n  //adjust option button after 4 evaluating buttons\r\n  document.querySelector('#adjustOption').addEventListener('click', e => {\r\n    optionsActions(e);\r\n\r\n    document.querySelector('#changeWords .optionsWindow').style.display = 'block';\r\n    scroll(0, 0);\r\n    document.querySelector('#improveChallengeButtons').style.display = \"none\";\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nlet activateUserInOptions = (userDoc, cards) => {\r\n  userInOp = userDoc;\r\n  cardsIoOp = cards;\r\n}\r\n\r\nlet refreshOptions = (currentCard, currentCardID) => {\r\n  currentCardInOp = currentCard;\r\n  currentCardInOpID = currentCardID;\r\n\r\n  // google definition\r\n\r\n  // let readyLink = '';\r\n  // if (userInOp.langToLearn == 'english') { readyLink = 'https://www.google.com/search?q=' + encodeURI('definition of ') + encodeURI(currentCard.languageToLearn) }\r\n  // else if (userInOp.langToLearn == 'czech') { readyLink = 'https://www.google.com/search?q=' + encodeURI('definuj ') + encodeURI(currentCard.languageToLearn) }\r\n  // else { readyLink = 'https://www.google.com/search?q=' + encodeURI(currentCard.languageToLearn) }\r\n  // defGoogleHTMLi.setAttribute('href', readyLink);\r\n\r\n  let readyLink = '';\r\n\r\n  // in these translations I am assuming that one of the languagess is allways czech!!\r\n  if (userInOp.langToLearn == 'english') { readyLink = 'https://translate.google.co.uk/?hl=cs#view=home&op=translate&sl=en&tl=cs&text=' + encodeURI(currentCard.languageToLearn) }\r\n  else if (userInOp.langToLearn == 'czech') { readyLink = 'https://translate.google.co.uk/?hl=en#view=home&op=translate&sl=cs&tl=en&text=' + encodeURI(currentCard.languageToLearn) }\r\n  else if (userInOp.langToLearn == 'german') { readyLink = 'https://translate.google.co.uk/?hl=cs#view=home&op=translate&sl=de&tl=cs&text=' + encodeURI(currentCard.languageToLearn) }\r\n  else if (userInOp.langToLearn == 'french') { readyLink = 'https://translate.google.co.uk/?hl=cs#view=home&op=translate&sl=fr&tl=cs&text=' + encodeURI(currentCard.languageToLearn) }\r\n  else { readyLink = 'https://www.google.com/search?q=' + encodeURI(currentCard.languageToLearn) }\r\n  defGoogleHTMLi.setAttribute('href', readyLink);\r\n\r\n\r\n  // console.log(defGoogleHTMLi);\r\n  // console.log(userInfo);\r\n}\r\n\r\n\r\nlet showOptions = () => {\r\n  optionsHTML.style.display = 'flex';\r\n  // document.querySelector('#connection').style.display = 'block';\r\n\r\n  // connection:\r\n  // if (currentCardInOp.connection == undefined) {\r\n  //   document.querySelector('#connection').style.display = 'none';\r\n  // } else {\r\n  //   document.querySelector('#connectionP').innerHTML = `<p>${currentCardInOp.connection}</p>`;\r\n  // }\r\n\r\n}\r\n\r\nlet hideOptions = () => {\r\n  optionsHTML.style.display = 'none';\r\n  // document.querySelector('#connection').style.display = 'none';\r\n}\r\n\r\n\r\n\r\n\r\n\r\n////////////adjusting form function and submit listener\r\nlet adjustForm = e => {\r\n  e.preventDefault();\r\n  let nativeIn = formToAdjust.nativeInput.value;\r\n  let toLearnIn = formToAdjust.toLearnInput.value;\r\n  let connect = formToAdjust.connectionInput.value;\r\n  let cRemindA = formToAdjust.remindConnectionA.value;\r\n  let cRemindB = formToAdjust.remindConnectionB.value;\r\n\r\n  let posponeCard = formToAdjust.pospone.value;\r\n  // alertUserForSec(posponeCard, 1);\r\n  // console.log('X', posponeCard, 'X');\r\n\r\n\r\n  // currentCardInOp.languageNative = nativeInput;\r\n  // currentCardInOp.languageToLearn = toLearnInput;\r\n  // console.log('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');\r\n  // console.log('ADJUSTED CARD:');\r\n  // console.log(currentCardInOp);\r\n  // console.log(currentCardInOpID);\r\n\r\n\r\n\r\n\r\n  let nowAdjust = new Date().getTime();\r\n  // currentCardInOp.dueTime = nowAdjust + 1000 * 60 * 1 //show in 1 min\r\n  // if pospone set...\r\n  posponeAdjusted = 0;\r\n  if (posponeCard === 'm') {\r\n    // currentCardInOp.dueTime += 1000 * 60 * 5;\r\n    posponeAdjusted = 1000 * 60 * 5;\r\n\r\n  } else if (posponeCard === 'h') {\r\n    // currentCardInOp.dueTime += 1000 * 60 * 60 * 5;\r\n    posponeAdjusted = 1000 * 60 * 60 * 5;\r\n\r\n  } else if (posponeCard === 'd') {\r\n    // currentCardInOp.dueTime += 1000 * 60 * 60 * 24 * 5;\r\n    posponeAdjusted = 1000 * 60 * 60 * 24 * 5;\r\n\r\n  } else { posponeAdjusted = 0; }\r\n\r\n  currentCardInOp.lastSeen = nowAdjust;\r\n\r\n  currentCardInOp.languageNative = nativeIn;\r\n  currentCardInOp.languageToLearn = toLearnIn;\r\n  currentCardInOp.connection = connect;\r\n  currentCardInOp.cReminderNativeShown = cRemindA;\r\n  currentCardInOp.cReminderToLearnShown = cRemindB;\r\n  currentCardInOp.translationChecked = true;\r\n\r\n  adjustedCardToReturn = currentCardInOp;\r\n  console.log('adjusted card in OPTIONS CCCCCCCCCCCCCCC', currentCardInOp);\r\n  console.log('Flip-card adjusted');\r\n  Object(_bundle__WEBPACK_IMPORTED_MODULE_0__[\"alertUserForSec\"])(\"<p>Evaluate card <br> to SAVE changes</p>\", 1.5);\r\n  // reset form - HAS TO BE HERE or\r\n\r\n\r\n\r\n\r\n\r\n  console.log('P1 should RRRRRRRRRRRRRefresh');\r\n  document.querySelector('#wordOne').textContent = currentCardInOp.languageNative;\r\n  document.querySelector('#wordTwo').textContent = currentCardInOp.languageToLearn;\r\n  //show connection text if exists\r\n  if (currentCardInOp.connection != undefined && currentCardInOp.connection != '') {\r\n    document.querySelector('#hintConnection').classList.remove('hide');\r\n    document.querySelector('#hintConnectionText').innerHTML = currentCardInOp.connection;\r\n    document.querySelector('#hintConnectionText').classList.remove('hide');\r\n\r\n  };\r\n\r\n  // // hide connection reminder\r\n  document.querySelector('#hintConnectionReminder').classList.add('hide');\r\n  document.querySelector('#hintConnectionReminder + *').classList.add('hide');\r\n\r\n  // hide adjust window\r\n  document.querySelector('#changeWords .optionsWindow').style.display = 'none';\r\n  scroll(0, _bundle__WEBPACK_IMPORTED_MODULE_0__[\"scrollAmount\"]);  // to hide ALL scores\r\n  formToAdjust.reset();\r\n\r\n  document.querySelector('#threeButtons').style.backgroundColor = 'rgba(0, 0, 0, 1)';\r\n  document.querySelector('#saveChangesAlert').style.display = 'block';\r\n}\r\n\r\nlet getPosponeTime = () => {\r\n  let sendTime = posponeAdjusted;\r\n  posponeAdjusted = 0;\r\n  console.log('PPPPPPPPPPPPPPPPPPPPPP', sendTime);\r\n  return sendTime;\r\n}\r\n\r\nlet formToAdjust = document.querySelector('#formAdjustWord');\r\nformToAdjust.addEventListener('submit', adjustForm);\r\n\r\n\n\n//# sourceURL=webpack:///./src/js/wordsOptions.js?");

/***/ })

/******/ });